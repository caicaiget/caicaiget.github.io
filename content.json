[{"title":"virtualenv虚拟环境","date":"2018-10-22T03:40:18.000Z","path":"post/2018-10-22-virtualenv虚拟环境.html","text":"virtualenv就是用来为一个应用创建一套“隔离”的Python运行环境。 为不同的python版本创建不同的虚拟环境 首先，安装virtualenv: 1pip install virtualenv 现在，假设我们有一个jango的项目，需要一套独立的python环境 12mkdir myprojectcd myproject 创建一个独立的python运行环境 djenv 12345virtualenv --no-site-packages -p C:\\python36\\python.exe djenvRunning virtualenv with interpreter C:\\python36\\python.exeUsing base prefix 'C:\\\\python36'New python executable in E:\\env\\djenv\\Scripts\\python.exeInstalling setuptools, pip, wheel...done. 命令virtualenv就可以创建一个独立的Python运行环境，我们还加上了参数--no-site-packages，这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。-p指定python版本，假设你公司有两个版本的python版本代码交给你管理，那么你只有选择对应的.exe文件就可以建立不同python版本的虚拟环境 现在进入虚拟环境 1234# linux中的命令source djenv\\Scripts\\activate# windows中直接cd进去就可以了cd djenv\\Scripts\\activate 进入后能发现命令提示符变了，有个（djenv）前缀，表示当前环境是一个名为djenv的Python环境。 1234567891011121314(djenv) E:\\env\\djenv\\Scripts&gt;# 查看当前装的库以及版本(djenv) E:\\env\\djenv\\Scripts&gt;pip list Package Version---------- -------Django 1.11pip 18.1pytz 2018.5setuptools 40.4.3wheel 0.32.1# 查看安装的第三方库的版本(djenv) E:\\env\\djenv\\Scripts&gt;pip freezeDjango==1.11pytz==2018.5 退出虚拟环境 1deactivate virtualenv是如何创建“独立”的Python运行环境的呢？原理很简单，就是把系统Python复制一份到virtualenv的环境，用命令source djenv/bin/activate进入一个virtualenv环境时，virtualenv会修改相关环境变量，让命令python和pip均指向当前的virtualenv环境。","tags":[{"name":"virtualenv虚拟环境","slug":"virtualenv虚拟环境","permalink":"https://caicaiget.github.io/tags/virtualenv虚拟环境/"},{"name":"django虚拟环境创建","slug":"django虚拟环境创建","permalink":"https://caicaiget.github.io/tags/django虚拟环境创建/"}]},{"title":"Django小结","date":"2018-10-22T02:22:09.000Z","path":"post/2018-10-22-Django小结.html","text":"Django是一个用Python编写的开放源代码的Web应用框架，代码是开源的。 此系统采用了MVC的框架模式, 也可以称为MTV模式 什么是MVC模式 MVC全名是Model View Controller。（强制性的使应用程序的输入，处理和输出分开） 模型（Model） 即数据存取层。用于封装于应用程序的业务逻辑相关的数据，以及对数据的处理。说白了就是模型对象负责在数据库中存取数据 视图（View） 即表现层。负责数据的显示和呈现。渲染的html页面给用户，或者返回数据给用户。 控制器（Coneroller） 即业务逻辑层。负责从用户端收集用户的输入，进行业务逻辑处理，包括向模型中发送数据，进行CRUD操作。 MVC就是一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。 django的模式简介 django的模式应该是MVT模式，但是本质与MVC没什么区别 Model： 负责业务与数据库(ORM)的对象 View： 负责业务逻辑并适当调用Model和Template Template: 负责把页面渲染展示给用户 注意： Django中还有一个url分发器，也叫作路由。主要用于将url请求发送给不同的View处理，View在进行相关的业务逻辑处理。 创建配置django项目 创建django-admin startproject day01 创建完成后能看到有下面文件 manage.py：是Django用于管理本项目的管理工具集，之后站点运行，数据库自动生成，数据表的修改等都是通过该文件完成。 _init_.py： 指明该目录结构是一个python包，暂无内容，在后期会初始化一些工具会使用到。 seetings.py： Django项目的配置文件，其中定义了本项目的引用组件，项目名，数据库，静态资源，调试模式，域名限制等 urls.py：项目的URL路由映射，实现客户端请求url由哪个模块进行响应。 wsgi.py：定义WSGI接口信息，通常本文件生成后无需改动 启动项目 python manage.py runserver 8080 在8080端口启动django，端口可以不用写，启动会随机分配端口。但是这样就只能自己访问，如果想要所有ip访问就指定ip0.0.0.0:8080 启动后可以便可以访问了http://127.0.0.1:8000/ 12345System check identified no issues (0 silenced).October 22, 2018 - 17:07:22Django version 1.11, using settings 'day01.settings'Starting development server at http://127.0.0.1:8000/Quit the server with CTRL-BREAK. 配置setting.py文件 LANGUAGE_CODE = ‘zh-hans’ 表示中文 LANGUAGE_CODE = ‘en-us’ 表示英文 设置时区： TIME_ZONE = ‘Asia/Shanghai’ UTC：世界标准时间，也就是平常说的零时区。 北京时间表示东八区时间，即UTC+8 由于python3没有自带数据库处理包，需要安装pymysql，在python2中有自带的MySQLdb 安装过后需要在__init__.py中添加 123import pymysqlpymysql.install_as_MySQLdb() 修改setting.py中的DATABASE， 12345678910DATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.mysql', 'NAME': 'dj', # 数据库 'USER': 'root', 'PASSWORD': '123456', 'HOST': '127.0.0.1', 'port': 3306 &#125;&#125; 修改完成后执行python manage.py migrate，执行后会创建django需要的数据表，有如下表 ​ 前面6个表是跟权限相关的表，auth_user是用户表，我们创建一个超级管理员用户 ​ python manage.py createsuperuser，账号为admin，输入管理员密码。你就会发现auth_user表中多了一个记录。 访问管理后台 访问http://127.0.0.1:8000/admin/ 并登陆","tags":[{"name":"Django","slug":"Django","permalink":"https://caicaiget.github.io/tags/Django/"}]},{"title":"知识点总结","date":"2018-10-20T07:50:23.000Z","path":"post/2018-10-20-知识点总结.html","text":"一些重要的知识点。 一些面试题目，加油！ Python语言特性 1 Python的函数参数传递 看两个例子: 12345a = 1def fun(a): a = 2fun(a)print a # 1 12345a = []def fun(a): a.append(1)fun(a)print a # [1] 所有的变量都可以理解是内存中一个对象的“引用”，或者，也可以看似c中void*的感觉。 通过id来看引用a的内存地址可以比较理解： 12345678a = 1def fun(a): print \"func_in\",id(a) # func_in 41322472 a = 2 print \"re-point\",id(a), id(2) # re-point 41322448 41322448print \"func_out\",id(a), id(1) # func_out 41322472 41322472fun(a)print a # 1 注：具体的值在不同电脑上运行时可能不同。 可以看到，在执行完a = 2之后，a引用中保存的值，即内存地址发生变化，由原来1对象的所在的地址变成了2这个实体对象的内存地址。 而第2个例子a引用保存的内存值就不会发生变化： 1234567a = []def fun(a): print \"func_in\",id(a) # func_in 53629256 a.append(1)print \"func_out\",id(a) # func_out 53629256fun(a)print a # [1] 这里记住的是类型是属于对象的，而不是变量。而对象有两种,“可更改”（mutable）与“不可更改”（immutable）对象。在python中，strings, tuples, 和numbers是不可更改的对象，而 list, dict, set 等则是可以修改的对象。(这就是这个问题的重点) 当一个引用传递给函数的时候,函数自动复制一份引用,这个函数里的引用和外边的引用没有半毛关系了.所以第一个例子里函数把引用指向了一个不可变对象,当函数返回的时候,外面的引用没半毛感觉.而第二个例子就不一样了,函数内的引用指向的是可变对象,对它的操作就和定位了指针地址一样,在内存里进行修改. 如果还不明白的话,这里有更好的解释: http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference 2 Python中的元类(metaclass) 这个非常的不常用,但是像ORM这种复杂的结构还是会需要的,详情请看:http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python 3 @staticmethod和@classmethod Python其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下: 12345678910111213141516def foo(x): print \"executing foo(%s)\"%(x)class A(object): def foo(self,x): print \"executing foo(%s,%s)\"%(self,x) @classmethod def class_foo(cls,x): print \"executing class_foo(%s,%s)\"%(cls,x) @staticmethod def static_foo(x): print \"executing static_foo(%s)\"%xa=A() 这里先理解下函数参数里面的self和cls.这个self和cls是对类或者实例的绑定,对于一般的函数来说我们可以这么调用foo(x),这个函数就是最常用的,它的工作跟任何东西(类,实例)无关.对于实例方法,我们知道在类里每次定义方法的时候都需要绑定这个实例,就是foo(self, x),为什么要这么做呢?因为实例方法的调用离不开实例,我们需要把实例自己传给函数,调用的时候是这样的a.foo(x)(其实是foo(a, x)).类方法一样,只不过它传递的是类而不是实例,A.class_foo(x).注意这里的self和cls可以替换别的参数,但是python的约定是这俩,还是不要改的好. 对于静态方法其实和普通的方法一样,不需要对谁进行绑定,唯一的区别是调用的时候需要使用a.static_foo(x)或者A.static_foo(x)来调用. \\ 实例方法 类方法 静态方法 a = A() a.foo(x) a.class_foo(x) a.static_foo(x) A 不可用 A.class_foo(x) A.static_foo(x) 更多关于这个问题: http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python https://realpython.com/blog/python/instance-class-and-static-methods-demystified/ 4 类变量和实例变量 类变量： 是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。例如下例中，num_of_instance 就是类变量，用于跟踪存在着多少个Test 的实例。 实例变量： 实例化之后，每个实例单独拥有的变量。 12345678910111213class Test(object): num_of_instance = 0 def __init__(self, name): self.name = name Test.num_of_instance += 1 if __name__ == '__main__': print Test.num_of_instance # 0 t1 = Test('jack') print Test.num_of_instance # 1 t2 = Test('lucy') print t1.name , t1.num_of_instance # jack 2 print t2.name , t2.num_of_instance # lucy 2 补充的例子 123456789class Person: name=\"aaa\"p1=Person()p2=Person()p1.name=\"bbb\"print p1.name # bbbprint p2.name # aaaprint Person.name # aaa 这里p1.name=&quot;bbb&quot;是实例调用了类变量,这其实和上面第一个问题一样,就是函数传参的问题,p1.name一开始是指向的类变量name=&quot;aaa&quot;,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了. 可以看看下面的例子: 123456789class Person: name=[]p1=Person()p2=Person()p1.name.append(1)print p1.name # [1]print p2.name # [1]print Person.name # [1] 参考:http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block 5 Python自省 这个也是python彪悍的特性. 自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance(). 12345a = [1,2,3]b = &#123;'a':1,'b':2,'c':3&#125;c = Trueprint type(a),type(b),type(c) # &lt;type 'list'&gt; &lt;type 'dict'&gt; &lt;type 'bool'&gt;print isinstance(a,list) # True 6 字典推导式 可能你见过列表推导时,却没有见过字典推导式,在2.7中才加入的: 1d = &#123;key: value for (key, value) in iterable&#125; 7 Python中单下划线和双下划线 1234567891011121314&gt;&gt;&gt; class MyClass():... def __init__(self):... self.__superprivate = \"Hello\"... self._semiprivate = \", world!\"...&gt;&gt;&gt; mc = MyClass()&gt;&gt;&gt; print mc.__superprivateTraceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;AttributeError: myClass instance has no attribute '__superprivate'&gt;&gt;&gt; print mc._semiprivate, world!&gt;&gt;&gt; print mc.__dict__&#123;'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'&#125; __foo__:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如__init__(),__del__(),__call__()这些特殊方法 _foo:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问； __foo:这个有真正的意义:解析器用_classname__foo来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,通过对象名._类名__xxx这样的方式可以访问. 详情见:http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python 或者: http://www.zhihu.com/question/19754941 8 字符串格式化:%和.format .format在许多方面看起来更便利.对于%最烦人的是它无法同时传递一个变量和元组.你可能会想下面的代码不会有什么问题: 1\"hi there %s\" % name 但是,如果name恰好是(1,2,3),它将会抛出一个TypeError异常.为了保证它总是正确的,你必须这样做: 1\"hi there %s\" % (name,) # 提供一个单元素的数组而不是一个参数 但是有点丑…format就没有这些问题.你给的第二个问题也是这样,.format好看多了. 你为什么不用它? 不知道它(在读这个之前) 为了和Python2.5兼容(譬如logging库建议使用%(issue #4)) http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format 9 迭代器和生成器 这个是stackoverflow里python排名第一的问题,值得一看: http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python 这是中文版: http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html 这里有个关于生成器的创建问题面试官有考： 问： 将列表生成式中[]改成() 之后数据结构是否改变？ 答案：是，从列表变为生成器 123456&gt;&gt;&gt; L = [x*x for x in range(10)]&gt;&gt;&gt; L[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&gt;&gt;&gt; g = (x*x for x in range(10))&gt;&gt;&gt; g&lt;generator object &lt;genexpr&gt; at 0x0000028F8B774200&gt; 通过列表生成式，可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含百万元素的列表，不仅是占用很大的内存空间，如：我们只需要访问前面的几个元素，后面大部分元素所占的空间都是浪费的。因此，没有必要创建完整的列表（节省大量内存空间）。在Python中，我们可以采用生成器：边循环，边计算的机制—&gt;generator 10 *args and **kwargs 用*args和**kwargs只是为了方便并没有强制使用它们. 当你不确定你的函数里将要传递多少参数时你可以用*args.例如,它可以传递任意数量的参数: 12345678&gt;&gt;&gt; def print_everything(*args): for count, thing in enumerate(args):... print '&#123;0&#125;. &#123;1&#125;'.format(count, thing)...&gt;&gt;&gt; print_everything('apple', 'banana', 'cabbage')0. apple1. banana2. cabbage 相似的,**kwargs允许你使用没有事先定义的参数名: 1234567&gt;&gt;&gt; def table_things(**kwargs):... for name, value in kwargs.items():... print '&#123;0&#125; = &#123;1&#125;'.format(name, value)...&gt;&gt;&gt; table_things(apple = 'fruit', cabbage = 'vegetable')cabbage = vegetableapple = fruit 你也可以混着用.命名参数首先获得参数值然后所有的其他参数都传递给*args和**kwargs.命名参数在列表的最前端.例如: 1def table_things(titlestring, **kwargs) *args和**kwargs可以同时在函数的定义中,但是*args必须在**kwargs前面. 当调用函数时你也可以用*和**语法.例如: 1234567&gt;&gt;&gt; def print_three_things(a, b, c):... print 'a = &#123;0&#125;, b = &#123;1&#125;, c = &#123;2&#125;'.format(a,b,c)...&gt;&gt;&gt; mylist = ['aardvark', 'baboon', 'cat']&gt;&gt;&gt; print_three_things(*mylist)a = aardvark, b = baboon, c = cat 就像你看到的一样,它可以传递列表(或者元组)的每一项并把它们解包.注意必须与它们在函数里的参数相吻合.当然,你也可以在函数定义或者函数调用时用*. http://stackoverflow.com/questions/3394835/args-and-kwargs 11 面向切面编程AOP和装饰器 这个AOP一听起来有点懵,同学面阿里的时候就被问懵了… 装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理等。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量函数中与函数功能本身无关的雷同代码并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。 这个问题比较大,推荐: http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python 中文: http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/3/README.html 12 鸭子类型 “当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。” 我们并不关心对象是什么类型，到底是不是鸭子，只关心行为。 比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很多相同的方法，我们把它们当作文件使用。 又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以它的参数可以是list/tuple/dict/字符串/生成器等. 鸭子类型在动态语言中经常使用，非常灵活，使得python不想java那样专门去弄一大堆的设计模式。 13 Python中重载 引自知乎:http://www.zhihu.com/question/20053359 函数重载主要是为了解决两个问题。 可变参数类型。 可变参数个数。 另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。 好吧，那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。 那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是缺省参数。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。 好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。 14 新式类和旧式类 这个面试官问了,我说了老半天,不知道他问的真正意图是什么. stackoverflow 这篇文章很好的介绍了新式类的特性: http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html 新式类很早在2.2就出现了,所以旧式类完全是兼容的问题,Python3里的类全部都是新式类.这里有一个MRO问题可以了解下(新式类是广度优先,旧式类是深度优先),&lt;Python核心编程&gt;里讲的也很多. 一个旧式类的深度优先的例子 12345678910111213141516class A(): def foo1(self): print \"A\"class B(A): def foo2(self): passclass C(A): def foo1(self): print \"C\"class D(B, C): passd = D()d.foo1()# A 按照经典类的查找顺序从左到右深度优先的规则，在访问d.foo1()的时候,D这个类是没有的…那么往上查找,先找到B,里面没有,深度优先,访问A,找到了foo1(),所以这时候调用的是A的foo1()，从而导致C重写的foo1()被绕过 15 __new__和__init__的区别 这个__new__确实很少见到,先做了解吧. __new__是一个静态方法,而__init__是一个实例方法. __new__方法会返回一个创建的实例,而__init__什么都不返回. 只有在__new__返回一个cls的实例时后面的__init__才能被调用. 当创建一个新实例时调用__new__,初始化一个实例时用__init__. stackoverflow ps: __metaclass__是创建类时起作用.所以我们可以分别使用__metaclass__,__new__和__init__来分别在类创建,实例创建和实例初始化的时候做一些小手脚. 16 单例模式 单例模式是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。 __new__()在__init__()之前被调用，用于生成实例对象。利用这个方法和类的属性的特点可以实现设计模式的单例模式。单例模式是指创建唯一对象，单例模式设计的类只能实例 这个绝对常考啊.绝对要记住1~2个方法,当时面试官是让手写的. 1 使用__new__方法 123456789class Singleton(object): def __new__(cls, *args, **kw): if not hasattr(cls, '_instance'): orig = super(Singleton, cls) cls._instance = orig.__new__(cls, *args, **kw) return cls._instanceclass MyClass(Singleton): a = 1 2 共享属性 创建实例时把所有实例的__dict__指向同一个字典,这样它们具有相同的属性和方法. 12345678910class Borg(object): _state = &#123;&#125; def __new__(cls, *args, **kw): ob = super(Borg, cls).__new__(cls, *args, **kw) ob.__dict__ = cls._state return obclass MyClass2(Borg): a = 1 3 装饰器版本 1234567891011def singleton(cls): instances = &#123;&#125; def getinstance(*args, **kw): if cls not in instances: instances[cls] = cls(*args, **kw) return instances[cls] return getinstance@singletonclass MyClass: ... 4 import方法 作为python的模块是天然的单例模式 1234567891011# mysingleton.pyclass My_Singleton(object): def foo(self): passmy_singleton = My_Singleton()# to usefrom mysingleton import my_singletonmy_singleton.foo() 单例模式伯乐在线详细解释 17 Python中的作用域 Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。 当 Python 遇到一个变量的话他会按照这样的顺序进行搜索： 本地作用域（Local）→当前作用域被嵌入的本地作用域（Enclosing locals）→全局/模块作用域（Global）→内置作用域（Built-in） 18 GIL线程全局锁 线程全局锁(Global Interpreter Lock),即Python为了保证线程安全而采取的独立线程运行的限制,说白了就是一个核只能在同一时间运行一个线程.对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。 见Python 最难的问题 解决办法就是多进程和下面的协程(协程也只是单CPU,但是能减小切换代价提升性能). 19 协程 知乎被问到了,呵呵哒,跪了 简单点说协程是进程和线程的升级版,进程和线程都面临着内核态和用户态的切换问题而耗费许多切换时间,而协程就是用户自己控制切换的时机,不再需要陷入系统的内核态. Python里最常见的yield就是协程的思想!可以查看第九个问题. 20 闭包 闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。 当一个内嵌函数引用其外部作作用域的变量,我们就会得到一个闭包. 总结一下,创建一个闭包必须满足以下几点: 必须有一个内嵌函数 内嵌函数必须引用外部函数中的变量 外部函数的返回值必须是内嵌函数 感觉闭包还是有难度的,几句话是说不明白的,还是查查相关资料. 重点是函数运行后并不会被撤销,就像16题的instance字典一样,当函数运行完后,instance并不被销毁,而是继续留在内存空间里.这个功能类似类里的类变量,只不过迁移到了函数上. 闭包就像个空心球一样,你知道外面和里面,但你不知道中间是什么样. 21 lambda函数 其实就是一个匿名函数,为什么叫lambda?因为和后面的函数式编程有关. 推荐: 知乎 22 Python函数式编程 这个需要适当的了解一下吧,毕竟函数式编程在Python中也做了引用. 推荐: 酷壳 python中函数式编程支持: filter 函数的功能相当于过滤器。调用一个布尔函数bool_func来迭代遍历每个seq中的元素；返回一个使bool_seq返回值为true的元素的序列。 1234&gt;&gt;&gt;a = [1,2,3,4,5,6,7]&gt;&gt;&gt;b = filter(lambda x: x &gt; 5, a)&gt;&gt;&gt;print b&gt;&gt;&gt;[6,7] map函数是对一个序列的每个项依次执行函数，下面是对一个序列每个项都乘以2： 123&gt;&gt;&gt; a = map(lambda x:x*2,[1,2,3])&gt;&gt;&gt; list(a)[2, 4, 6] reduce函数是对一个序列的每个项迭代调用函数，下面是求3的阶乘： 12&gt;&gt;&gt; reduce(lambda x,y:x*y,range(1,4))6 23 Python里的拷贝 引用和copy(),deepcopy()的区别 1234567891011121314151617181920import copya = [1, 2, 3, 4, ['a', 'b']] #原始对象b = a #赋值，传对象的引用c = copy.copy(a) #对象拷贝，浅拷贝d = copy.deepcopy(a) #对象拷贝，深拷贝a.append(5) #修改对象aa[4].append('c') #修改对象a中的['a', 'b']数组对象print 'a = ', aprint 'b = ', bprint 'c = ', cprint 'd = ', d输出结果：a = [1, 2, 3, 4, ['a', 'b', 'c'], 5]b = [1, 2, 3, 4, ['a', 'b', 'c'], 5]c = [1, 2, 3, 4, ['a', 'b', 'c']]d = [1, 2, 3, 4, ['a', 'b']] 24 Python垃圾回收机制 Python GC主要使用引用计数（reference counting）来跟踪和回收垃圾。在引用计数的基础上，通过“标记-清除”（mark and sweep）解决容器对象可能产生的循环引用问题，通过“分代回收”（generation collection）以空间换时间的方法提高垃圾回收效率。 1 引用计数 PyObject是每个对象必有的内容，其中ob_refcnt就是做为引用计数。当一个对象有新的引用时，它的ob_refcnt就会增加，当引用它的对象被删除，它的ob_refcnt就会减少.引用计数为0时，该对象生命就结束了。 优点: 简单 实时性 缺点: 维护引用计数消耗资源 循环引用 2 标记-清除机制 基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没标记的对象释放。 3 分代技术 分代回收的整体思想是：将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，垃圾收集频率随着“代”的存活时间的增大而减小，存活时间通常利用经过几次垃圾回收来度量。 Python默认定义了三代对象集合，索引数越大，对象存活时间越长。 举例： 当某些内存块M经过了3次垃圾收集的清洗之后还存活时，我们就将内存块M划到一个集合A中去，而新分配的内存都划分到集合B中去。当垃圾收集开始工作时，大多数情况都只对集合B进行垃圾回收，而对集合A进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存少了，效率自然就提高了。在这个过程中，集合B中的某些内存块由于存活时间长而会被转移到集合A中，当然，集合A中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代的机制而被延迟。 25 Python的List 推荐: http://www.jianshu.com/p/J4U6rR 26 Python的is is是对比地址,==是对比值 27 read,readline和readlines read 读取整个文件 readline 读取下一行,使用生成器方法 readlines 读取整个文件到一个迭代器以供我们遍历 28 Python2和3的区别 推荐：Python 2.7.x 与 Python 3.x 的主要差异 29 super init super() lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven’t already. Note that the syntax changed in Python 3.0: you can just say super().__init__() instead of super(ChildB, self).__init__() which IMO is quite a bit nicer. http://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods Python2.7中的super方法浅见 30 range and xrange 都在循环时使用，xrange内存性能更好。 for i in range(0, 20): for i in xrange(0, 20): What is the difference between range and xrange functions in Python 2.X? range creates a list, so if you do range(1, 10000000) it creates a list in memory with 9999999 elements. xrange is a sequence object that evaluates lazily. http://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x 操作系统 1 select,poll和epoll 其实所有的I/O都是轮询的方法,只不过实现的层面不同罢了. 这个问题可能有点深入了,但相信能回答出这个问题是对I/O多路复用有很好的了解了.其中tornado使用的就是epoll的. selec,poll和epoll区别总结 基本上select有3个缺点: 连接数受限 查找配对速度慢 数据由内核拷贝到用户态 poll改善了第一个缺点 epoll改了三个缺点. 关于epoll的: http://www.cnblogs.com/my_life/articles/3968782.html 2 调度算法 先来先服务(FCFS, First Come First Serve) 短作业优先(SJF, Shortest Job First) 最高优先权调度(Priority Scheduling) 时间片轮转(RR, Round Robin) 多级反馈队列调度(multilevel feedback queue scheduling) 常见的调度算法总结:http://www.jianshu.com/p/6edf8174c1eb 实时调度算法: 最早截至时间优先 EDF 最低松弛度优先 LLF 3 死锁 原因: 竞争资源 程序推进顺序不当 必要条件: 互斥条件 请求和保持条件 不剥夺条件 环路等待条件 处理死锁基本方法: 预防死锁(摒弃除1以外的条件) 避免死锁(银行家算法) 检测死锁(资源分配图) 解除死锁 剥夺资源 撤销进程 死锁概念处理策略详细介绍:https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/10.html 4 程序编译与链接 推荐: http://www.ruanyifeng.com/blog/2014/11/compiler.html Bulid过程可以分解为4个步骤:预处理(Prepressing), 编译(Compilation)、汇编(Assembly)、链接(Linking) 以c语言为例: 1 预处理 预编译过程主要处理那些源文件中的以“#”开始的预编译指令，主要处理规则有： 将所有的“#define”删除，并展开所用的宏定义 处理所有条件预编译指令，比如“#if”、“#ifdef”、 “#elif”、“#endif” 处理“#include”预编译指令，将被包含的文件插入到该编译指令的位置，注：此过程是递归进行的 删除所有注释 添加行号和文件名标识，以便于编译时编译器产生调试用的行号信息以及用于编译时产生编译错误或警告时可显示行号 保留所有的#pragma编译器指令。 2 编译 编译过程就是把预处理完的文件进行一系列的词法分析、语法分析、语义分析及优化后生成相应的汇编代码文件。这个过程是整个程序构建的核心部分。 3 汇编 汇编器是将汇编代码转化成机器可以执行的指令，每一条汇编语句几乎都是一条机器指令。经过编译、链接、汇编输出的文件成为目标文件(Object File) 4 链接 链接的主要内容就是把各个模块之间相互引用的部分处理好，使各个模块可以正确的拼接。 链接的主要过程包块 地址和空间的分配（Address and Storage Allocation）、符号决议(Symbol Resolution)和重定位(Relocation)等步骤。 5 静态链接和动态链接 静态链接方法：静态链接的时候，载入代码就会把程序会用到的动态代码或动态代码的地址确定下来 静态库的链接可以使用静态链接，动态链接库也可以使用这种方法链接导入库 动态链接方法：使用这种方式的程序并不在一开始就完成动态链接，而是直到真正调用动态库代码时，载入程序才计算(被调用的那部分)动态代码的逻辑地址，然后等到某个时候，程序又需要调用另外某块动态代码时，载入程序又去计算这部分代码的逻辑地址，所以，这种方式使程序初始化时间较短，但运行期间的性能比不上静态链接的程序 6 虚拟内存技术 虚拟存储器是指具有请求调入功能和置换功能,能从逻辑上对内存容量加以扩充的一种存储系统. 7 分页和分段 分页: 用户程序的地址空间被划分成若干固定大小的区域，称为“页”，相应地，内存空间分成若干个物理块，页和块的大小相等。可将用户程序的任一页放在内存的任一块中，实现了离散分配。 分段: 将用户程序地址空间分成若干个大小不等的段，每段可以定义一组相对完整的逻辑信息。存储分配时，以段为单位，段与段在内存中可以不相邻接，也实现了离散分配。 分页与分段的主要区别 页是信息的物理单位,分页是为了实现非连续分配,以便解决内存碎片问题,或者说分页是由于系统管理的需要.段是信息的逻辑单位,它含有一组意义相对完整的信息,分段的目的是为了更好地实现共享,满足用户的需要. 页的大小固定,由系统确定,将逻辑地址划分为页号和页内地址是由机器硬件实现的.而段的长度却不固定,决定于用户所编写的程序,通常由编译程序在对源程序进行编译时根据信息的性质来划分. 分页的作业地址空间是一维的.分段的地址空间是二维的. 8 页面置换算法 最佳置换算法OPT:不可能实现 先进先出FIFO 最近最久未使用算法LRU:最近一段时间里最久没有使用过的页面予以置换. clock算法 9 边沿触发和水平触发 边缘触发是指每当状态变化时发生一个 io 事件，条件触发是只要满足条件就发生一个 io 事件 数据库 1 事务 数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。 彻底理解数据库事务: http://www.hollischuang.com/archives/898 2 数据库索引 推荐: http://tech.meituan.com/mysql-index.html MySQL索引背后的数据结构及算法原理 聚集索引,非聚集索引,B-Tree,B+Tree,最左前缀原理 3 Redis原理 Redis是什么？ 是一个完全开源免费的key-value内存数据库 通常被认为是一个数据结构服务器，主要是因为其有着丰富的数据结构 strings、map、 list、sets、 sorted sets Redis数据库 通常局限点来说，Redis也以消息队列的形式存在，作为内嵌的List存在，满足实时的高并发需求。在使用缓存的时候，redis比memcached具有更多的优势，并且支持更多的数据类型，把redis当作一个中间存储系统，用来处理高并发的数据库操作 速度快：使用标准C写，所有数据都在内存中完成，读写速度分别达到10万/20万 持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上，主要有两种策略，一是根据时间，更新次数的快照（save 300 10 ）二是基于语句追加方式(Append-only file，aof) 自动操作：对不同数据类型的操作都是自动的，很安全 快速的主–从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。 Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，在关系型数据库中，主要是以添加硬件、以分区为主要技术形式的纵向扩展解决了很多的应用场景，但随着web2.0、移动互联网、云计算等应用的兴起，这种扩展模式已经不太适合了，所以近年来，像采用主从配置、数据库复制形式的，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。 Redis缺点 是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。 Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。 4 乐观锁和悲观锁 悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作 乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。 乐观锁与悲观锁的具体区别: http://www.cnblogs.com/Bob-FD/p/3352216.html 5 MVCC 全称是Multi-Version Concurrent Control，即多版本并发控制，在MVCC协议下，每个读操作会看到一个一致性的snapshot，并且可以实现非阻塞的读。MVCC允许数据具有多个版本，这个版本可以是时间戳或者是全局递增的事务ID，在同一个时间点，不同的事务看到的数据是不同的。 MySQL的innodb引擎是如何实现MVCC的 innodb会为每一行添加两个字段，分别表示该行创建的版本和删除的版本，填入的是事务的版本号，这个版本号随着事务的创建不断递增。在repeated read的隔离级别（事务的隔离级别请看这篇文章）下，具体各种数据库操作的实现： select：满足以下两个条件innodb会返回该行数据： 该行的创建版本号小于等于当前版本号，用于保证在select操作之前所有的操作已经执行落地。 该行的删除版本号大于当前版本或者为空。删除版本号大于当前版本意味着有一个并发事务将该行删除了。 insert：将新插入的行的创建版本号设置为当前系统的版本号。 delete：将要删除的行的删除版本号设置为当前系统的版本号。 update：不执行原地update，而是转换成insert + delete。将旧行的删除版本号设置为当前版本号，并将新行insert同时设置创建版本号为当前版本号。 其中，写操作（insert、delete和update）执行时，需要将系统版本号递增。 由于旧数据并不真正的删除，所以必须对这些数据进行清理，innodb会开启一个后台线程执行清理工作，具体的规则是将删除版本号小于当前系统版本的行删除，这个过程叫做purge。 通过MVCC很好的实现了事务的隔离性，可以达到repeated read级别，要实现serializable还必须加锁。 参考：MVCC浅析 6 MyISAM和InnoDB MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。 InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。 mysql 数据库引擎: http://www.cnblogs.com/0201zcr/p/5296843.html MySQL存储引擎－－MyISAM与InnoDB区别: https://segmentfault.com/a/1190000008227211 网络 1 三次握手 客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。 服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机序号 B。 最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。 2 四次挥手 注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然. 客户端发送一个数据分段, 其中的 FIN 标记设置为1. 客户端进入 FIN-WAIT 状态. 该状态下客户端只接收数据, 不再发送数据. 服务器接收到带有 FIN = 1 的数据分段, 发送带有 ACK = 1 的剩余数据分段, 确认收到客户端发来的 FIN 信息. 服务器等到所有数据传输结束, 向客户端发送一个带有 FIN = 1 的数据分段, 并进入 CLOSE-WAIT 状态, 等待客户端发来带有 ACK = 1 的确认报文. 客户端收到服务器发来带有 FIN = 1 的报文, 返回 ACK = 1 的报文确认, 为了防止服务器端未收到需要重发, 进入 TIME-WAIT 状态. 服务器接收到报文后关闭连接. 客户端等待 2MSL 后未收到回复, 则认为服务器成功关闭, 客户端关闭连接. 图解: http://blog.csdn.net/whuslei/article/details/6667471 3 ARP协议 地址解析协议(Address Resolution Protocol)，其基本功能为透过目标设备的IP地址，查询目标的MAC地址，以保证通信的顺利进行。它是IPv4网络层必不可少的协议，不过在IPv6中已不再适用，并被邻居发现协议（NDP）所替代。 4 urllib和urllib2的区别 这个面试官确实问过,当时答的urllib2可以Post而urllib不可以. urllib提供urlencode方法用来GET查询字符串的产生，而urllib2没有。这是为何urllib常和urllib2一起使用的原因。 urllib2可以接受一个Request类的实例来设置URL请求的headers，urllib仅可以接受URL。这意味着，你不可以伪装你的User Agent字符串等。 5 Post和Get GET和POST有什么区别？及为什么网上的多数答案都是错的 知乎回答 get: RFC 2616 - Hypertext Transfer Protocol – HTTP/1.1 post: RFC 2616 - Hypertext Transfer Protocol – HTTP/1.1 6 Cookie和Session Cookie Session 储存位置 客户端 服务器端 目的 跟踪会话，也可以保存用户偏好设置或者保存用户名密码等 跟踪会话 安全性 不安全 安全 session技术是要使用到cookie的，之所以出现session技术，主要是为了安全。 7 apache和nginx的区别 nginx 相对 apache 的优点： 轻量级，同样起web 服务，比apache 占用更少的内存及资源 抗并发，nginx 处理请求是异步非阻塞的，支持更多的并发连接，而apache 则是阻塞型的，在高并发下nginx 能保持低资源低消耗高性能 配置简洁 高度模块化的设计，编写模块相对简单 社区活跃 apache 相对nginx 的优点： rewrite ，比nginx 的rewrite 强大 模块超多，基本想到的都可以找到 少bug ，nginx 的bug 相对较多 超稳定 8 网站用户密码保存 明文保存 明文hash后保存,如md5 MD5+Salt方式,这个salt可以随机 知乎使用了Bcrypy(好像)加密 9 HTTP和HTTPS 状态码 定义 1xx 报告 接收到请求，继续进程 2xx 成功 步骤成功接收，被理解，并被接受 3xx 重定向 为了完成请求,必须采取进一步措施 4xx 客户端出错 请求包括错的顺序或不能完成 5xx 服务器出错 服务器无法完成显然有效的请求 403: Forbidden 404: Not Found HTTPS握手,对称加密,非对称加密,TLS/SSL,RSA 10 XSRF和XSS CSRF(Cross-site request forgery)跨站请求伪造 XSS(Cross Site Scripting)跨站脚本攻击 CSRF重点在请求,XSS重点在脚本 11 幂等 Idempotence HTTP方法的幂等性是指一次和多次请求某一个资源应该具有同样的副作用。(注意是副作用) GET http://www.bank.com/account/123456，不会改变资源的状态，不论调用一次还是N次都没有副作用。请注意，这里强调的是一次和N次具有相同的副作用，而不是每次GET的结果相同。GET http://www.news.com/latest-news这个HTTP请求可能会每次得到不同的结果，但它本身并没有产生任何副作用，因而是满足幂等性的。 DELETE方法用于删除资源，有副作用，但它应该满足幂等性。比如：DELETE http://www.forum.com/article/4231，调用一次和N次对系统产生的副作用是相同的，即删掉id为4231的帖子；因此，调用者可以多次调用或刷新页面而不必担心引起错误。 POST所对应的URI并非创建的资源本身，而是资源的接收者。比如：POST http://www.forum.com/articles的语义是在http://www.forum.com/articles下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。 PUT所对应的URI是要创建或更新的资源本身。比如：PUT http://www.forum/articles/4231的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。 12 RESTful架构(SOAP,RPC) 推荐: http://www.ruanyifeng.com/blog/2011/09/restful.html 13 SOAP SOAP（原为Simple Object Access Protocol的首字母缩写，即简单对象访问协议）是交换数据的一种协议规范，使用在计算机网络Web服务（web service）中，交换带结构信息。SOAP为了简化网页服务器（Web Server）从XML数据库中提取数据时，节省去格式化页面时间，以及不同应用程序之间按照HTTP通信协议，遵从XML格式执行资料互换，使其抽象于语言实现、平台和硬件。 14 RPC RPC（Remote Procedure Call Protocol）——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。 总结:服务提供的两大流派.传统意义以方法调用为导向通称RPC。为了企业SOA,若干厂商联合推出webservice,制定了wsdl接口定义,传输soap.当互联网时代,臃肿SOA被简化为http+xml/json.但是简化出现各种混乱。以资源为导向,任何操作无非是对资源的增删改查，于是统一的REST出现了. 进化的顺序: RPC -&gt; SOAP -&gt; RESTful 15 CGI和WSGI CGI是通用网关接口，是连接web服务器和应用程序的接口，用户通过CGI来获取动态数据或文件等。 CGI程序是一个独立的程序，它可以用几乎所有语言来写，包括perl，c，lua，python等等。 WSGI, Web Server Gateway Interface，是Python应用程序或框架和Web服务器之间的一种接口，WSGI的其中一个目的就是让用户可以用统一的语言(Python)编写前后端。 官方说明：PEP-3333 16 中间人攻击 在GFW里屡见不鲜的,呵呵. 中间人攻击（Man-in-the-middle attack，通常缩写为MITM）是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。 17 c10k问题 所谓c10k问题，指的是服务器同时支持成千上万个客户端的问题，也就是concurrent 10 000 connection（这也是c10k这个名字的由来）。 推荐: https://my.oschina.net/xianggao/blog/664275 18 socket 推荐: http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml Socket=Ip address+ TCP/UDP + port 19 浏览器缓存 推荐: http://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html 304 Not Modified 20 HTTP1.0和HTTP1.1 推荐: http://blog.csdn.net/elifefly/article/details/3964766 请求头Host字段,一个服务器多个网站 长链接 文件断点续传 身份认证,状态管理,Cache缓存 HTTP请求8种方法介绍 HTTP/1.1协议中共定义了8种HTTP请求方法，HTTP请求方法也被叫做“请求动作”，不同的方法规定了不同的操作指定的资源方式。服务端也会根据不同的请求方法做不同的响应。 GET GET请求会显示请求指定的资源。一般来说GET方法应该只用于数据的读取，而不应当用于会产生副作用的非幂等的操作中。 GET会方法请求指定的页面信息，并返回响应主体，GET被认为是不安全的方法，因为GET方法会被网络蜘蛛等任意的访问。 HEAD HEAD方法与GET方法一样，都是向服务器发出指定资源的请求。但是，服务器在响应HEAD请求时不会回传资源的内容部分，即：响应主体。这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。HEAD方法常被用于客户端查看服务器的性能。 POST POST请求会 向指定资源提交数据，请求服务器进行处理，如：表单数据提交、文件上传等，请求数据会被包含在请求体中。POST方法是非幂等的方法，因为这个请求可能会创建新的资源或/和修改现有资源。 PUT PUT请求会身向指定资源位置上传其最新内容，PUT方法是幂等的方法。通过该方法客户端可以将指定资源的最新数据传送给服务器取代指定的资源的内容。 DELETE DELETE请求用于请求服务器删除所请求URI（统一资源标识符，Uniform Resource Identifier）所标识的资源。DELETE请求后指定资源会被删除，DELETE方法也是幂等的。 CONNECT CONNECT方法是HTTP/1.1协议预留的，能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接与非加密的HTTP代理服务器的通信。 OPTIONS OPTIONS请求与HEAD类似，一般也是用于客户端查看服务器的性能。 这个方法会请求服务器返回该资源所支持的所有HTTP请求方法，该方法会用’*’来代替资源名称，向服务器发送OPTIONS请求，可以测试服务器功能是否正常。JavaScript的XMLHttpRequest对象进行CORS跨域资源共享时，就是使用OPTIONS方法发送嗅探请求，以判断是否有对指定资源的访问权限。 允许 TRACE TRACE请求服务器回显其收到的请求信息，该方法主要用于HTTP请求的测试或诊断。 HTTP/1.1之后增加的方法 在HTTP/1.1标准制定之后，又陆续扩展了一些方法。其中使用中较多的是 PATCH 方法： PATCH PATCH方法出现的较晚，它在2010年的RFC 5789标准中被定义。PATCH请求与PUT请求类似，同样用于资源的更新。二者有以下两点不同： 但PATCH一般用于资源的部分更新，而PUT一般用于资源的整体更新。 当资源不存在时，PATCH会创建一个新的资源，而PUT只会对已在资源进行更新。 21 Ajax AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术。 *NIX unix进程间通信方式(IPC) 管道（Pipe）：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。 命名管道（named pipe）：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。 信号（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）。 消息（Message）队列：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺 共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。 内存映射（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。 信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。 套接口（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。 数据结构 1 红黑树 红黑树与AVL的比较： AVL是严格平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多； 红黑是用非严格的平衡来换取增删节点时候旋转次数的降低； 所以简单说，如果你的应用中，搜索的次数远远大于插入和删除，那么选择AVL，如果搜索，插入删除次数几乎差不多，应该选择RB。 红黑树详解: https://xieguanglei.github.io/blog/post/red-black-tree.html 教你透彻了解红黑树: https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md 编程题 1 台阶问题/斐波那契 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 1fib = lambda n: n if n &lt;= 2 else fib(n - 1) + fib(n - 2) 第二种记忆方法 1234567891011121314def memo(func): cache = &#123;&#125; def wrap(*args): if args not in cache: cache[args] = func(*args) return cache[args] return wrap@memodef fib(i): if i &lt; 2: return 1 return fib(i-1) + fib(i-2) 第三种方法 12345def fib(n): a, b = 0, 1 for _ in xrange(n): a, b = b, a + b return b 2 变态台阶问题 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 1fib = lambda n: n if n &lt; 2 else 2 * fib(n - 1) 3 矩形覆盖 我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？ 第2*n个矩形的覆盖方法等于第2*(n-1)加上第2*(n-2)的方法。 1f = lambda n: 1 if n &lt; 2 else f(n - 1) + f(n - 2) 4 杨氏矩阵查找 在一个m行n列二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 使用Step-wise线性搜索。 1234567891011121314151617def get_value(l, r, c): return l[r][c]def find(l, x): m = len(l) - 1 n = len(l[0]) - 1 r = 0 c = n while c &gt;= 0 and r &lt;= m: value = get_value(l, r, c) if value == x: return True elif value &gt; x: c = c - 1 elif value &lt; x: r = r + 1 return False 5 去除列表中的重复元素 用集合 1list(set(l)) 用字典 123l1 = ['b','c','d','b','c','a','a']l2 = &#123;&#125;.fromkeys(l1).keys()print l2 用字典并保持顺序 1234l1 = ['b','c','d','b','c','a','a']l2 = list(set(l1))l2.sort(key=l1.index)print l2 列表推导式 123l1 = ['b','c','d','b','c','a','a']l2 = [][l2.append(i) for i in l1 if not i in l2] sorted排序并且用列表推导式. l = [‘b’,‘c’,‘d’,‘b’,‘c’,‘a’,‘a’] [single.append(i) for i in sorted(l) if i not in single] print single 6 链表成对调换 1-&gt;2-&gt;3-&gt;4转换成2-&gt;1-&gt;4-&gt;3. 123456789101112131415class ListNode: def __init__(self, x): self.val = x self.next = Noneclass Solution: # @param a ListNode # @return a ListNode def swapPairs(self, head): if head != None and head.next != None: next = head.next head.next = self.swapPairs(next.next) next.next = head return next return head 7 创建字典的方法 1 直接创建 1dict = &#123;'name':'earth', 'port':'80'&#125; 2 工厂方法 123items=[('name','earth'),('port','80')]dict2=dict(items)dict1=dict((['name','earth'],['port','80'])) 3 fromkeys()方法 1234dict1=&#123;&#125;.fromkeys(('x','y'),-1)dict=&#123;'x':-1,'y':-1&#125;dict2=&#123;&#125;.fromkeys(('x','y'))dict2=&#123;'x':None, 'y':None&#125; 8 合并两个有序列表 知乎远程面试要求编程 尾递归 12345678910111213141516def _recursion_merge_sort2(l1, l2, tmp): if len(l1) == 0 or len(l2) == 0: tmp.extend(l1) tmp.extend(l2) return tmp else: if l1[0] &lt; l2[0]: tmp.append(l1[0]) del l1[0] else: tmp.append(l2[0]) del l2[0] return _recursion_merge_sort2(l1, l2, tmp)def recursion_merge_sort2(l1, l2): return _recursion_merge_sort2(l1, l2, []) 循环算法 思路： 定义一个新的空列表 比较两个列表的首个元素 小的就插入到新列表里 把已经插入新列表的元素从旧列表删除 直到两个旧列表有一个为空 再把旧列表加到新列表后面 123456789101112def loop_merge_sort(l1, l2): tmp = [] while len(l1) &gt; 0 and len(l2) &gt; 0: if l1[0] &lt; l2[0]: tmp.append(l1[0]) del l1[0] else: tmp.append(l2[0]) del l2[0] tmp.extend(l1) tmp.extend(l2) return tmp pop弹出 12345678910111213141516a = [1,2,3,7]b = [3,4,5]def merge_sortedlist(a,b): c = [] while a and b: if a[0] &gt;= b[0]: c.append(b.pop(0)) else: c.append(a.pop(0)) while a: c.append(a.pop(0)) while b: c.append(b.pop(0)) return cprint merge_sortedlist(a,b) 9 交叉链表求交点 其实思想可以按照从尾开始比较两个链表，如果相交，则从尾开始必然一致，只要从尾开始比较，直至不一致的地方即为交叉点，如图所示 1234567891011121314# 使用a,b两个list来模拟链表，可以看出交叉点是 7这个节点a = [1,2,3,7,9,1,5]b = [4,5,7,9,1,5]for i in range(1,min(len(a),len(b))): if i==1 and (a[-1] != b[-1]): print \"No\" break else: if a[-i] != b[-i]: print \"交叉节点：\",a[-i+1] break else: pass 另外一种比较正规的方法，构造链表类 1234567891011121314151617181920212223242526class ListNode: def __init__(self, x): self.val = x self.next = Nonedef node(l1, l2): length1, lenth2 = 0, 0 # 求两个链表长度 while l1.next: l1 = l1.next length1 += 1 while l2.next: l2 = l2.next length2 += 1 # 长的链表先走 if length1 &gt; lenth2: for _ in range(length1 - length2): l1 = l1.next else: for _ in range(length2 - length1): l2 = l2.next while l1 and l2: if l1.next == l2.next: return l1.next else: l1 = l1.next l2 = l2.next 修改了一下: 123456789101112131415161718192021222324252627282930#coding:utf-8class ListNode: def __init__(self, x): self.val = x self.next = Nonedef node(l1, l2): length1, length2 = 0, 0 # 求两个链表长度 while l1.next: l1 = l1.next#尾节点 length1 += 1 while l2.next: l2 = l2.next#尾节点 length2 += 1 #如果相交 if l1.next == l2.next: # 长的链表先走 if length1 &gt; length2: for _ in range(length1 - length2): l1 = l1.next return l1#返回交点 else: for _ in range(length2 - length1): l2 = l2.next return l2#返回交点 # 如果不相交 else: return 思路: http://humaoli.blog.163.com/blog/static/13346651820141125102125995/ 10 二分查找 1234567891011121314151617#coding:utf-8def binary_search(list,item): low = 0 high = len(list)-1 while low&lt;=high: mid = (low+high)/2 guess = list[mid] if guess&gt;item: high = mid-1 elif guess&lt;item: low = mid+1 else: return mid return Nonemylist = [1,3,5,7,9]print binary_search(mylist,3) 参考: http://blog.csdn.net/u013205877/article/details/76411718 11 快排 123456789101112#coding:utf-8def quicksort(list): if len(list)&lt;2: return list else: midpivot = list[0] lessbeforemidpivot = [i for i in list[1:] if i&lt;=midpivot] biggerafterpivot = [i for i in list[1:] if i &gt; midpivot] finallylist = quicksort(lessbeforemidpivot)+[midpivot]+quicksort(biggerafterpivot) return finallylistprint quicksort([2,4,6,7,1,2,5]) 更多排序问题可见：数据结构与算法-排序篇-Python描述 12 找零问题 12345678910111213141516171819#coding:utf-8#values是硬币的面值values = [ 25, 21, 10, 5, 1]#valuesCounts 钱币对应的种类数#money 找出来的总钱数#coinsUsed 对应于目前钱币总数i所使用的硬币数目def coinChange(values,valuesCounts,money,coinsUsed): #遍历出从1到money所有的钱数可能 for cents in range(1,money+1): minCoins = cents #把所有的硬币面值遍历出来和钱数做对比 for kind in range(0,valuesCounts): if (values[kind] &lt;= cents): temp = coinsUsed[cents - values[kind]] +1 if (temp &lt; minCoins): minCoins = temp coinsUsed[cents] = minCoins print ('面值:&#123;0&#125;的最少硬币使用数为:&#123;1&#125;'.format(cents, coinsUsed[cents])) 思路: http://blog.csdn.net/wdxin1322/article/details/9501163 方法: http://www.cnblogs.com/ChenxofHit/archive/2011/03/18/1988431.html 13 广度遍历和深度遍历二叉树 给定一个数组，构建二叉树，并且按层次打印这个二叉树 14 二叉树节点 12345678class Node(object): def __init__(self, data, left=None, right=None): self.data = data self.left = left self.right = righttree = Node(1, Node(3, Node(7, Node(0)), Node(6)), Node(2, Node(5), Node(4))) 15 层次遍历 123456def lookup(root): row = [root] while row: print(row) row = [kid for item in row for kid in (item.left, item.right) if kid] 16 深度遍历 1234567891011def deep(root): if not root: return print root.data deep(root.left) deep(root.right)if __name__ == '__main__': lookup(tree) deep(tree) 17 前中后序遍历 深度遍历改变顺序就OK了 12345678910111213141516171819202122232425262728293031323334353637#coding:utf-8#二叉树的遍历#简单的二叉树节点类class Node(object): def __init__(self,value,left,right): self.value = value self.left = left self.right = right#中序遍历:遍历左子树,访问当前节点,遍历右子树def mid_travelsal(root): if root.left is None: mid_travelsal(root.left) #访问当前节点 print(root.value) if root.right is not None: mid_travelsal(root.right)#前序遍历:访问当前节点,遍历左子树,遍历右子树def pre_travelsal(root): print (root.value) if root.left is not None: pre_travelsal(root.left) if root.right is not None: pre_travelsal(root.right)#后续遍历:遍历左子树,遍历右子树,访问当前节点def post_trvelsal(root): if root.left is not None: post_trvelsal(root.left) if root.right is not None: post_trvelsal(root.right) print (root.value) 18 求最大树深 1234def maxDepth(root): if not root: return 0 return max(maxDepth(root.left), maxDepth(root.right)) + 1 19 求两棵树是否相同 1234567def isSameTree(p, q): if p == None and q == None: return True elif p and q : return p.val == q.val and isSameTree(p.left,q.left) and isSameTree(p.right,q.right) else : return False 20 前序中序求后序 推荐: http://blog.csdn.net/hinyunsin/article/details/6315502 123456789101112131415def rebuild(pre, center): if not pre: return cur = Node(pre[0]) index = center.index(pre[0]) cur.left = rebuild(pre[1:index + 1], center[:index]) cur.right = rebuild(pre[index + 1:], center[index + 1:]) return curdef deep(root): if not root: return deep(root.left) deep(root.right) print root.data 21 单链表逆置 12345678910111213141516171819202122class Node(object): def __init__(self, data=None, next=None): self.data = data self.next = nextlink = Node(1, Node(2, Node(3, Node(4, Node(5, Node(6, Node(7, Node(8, Node(9)))))))))def rev(link): pre = link cur = link.next pre.next = None while cur: tmp = cur.next cur.next = pre pre = cur cur = tmp return preroot = rev(link)while root: print root.data root = root.next 思路: http://blog.csdn.net/feliciafay/article/details/6841115 方法: http://www.xuebuyuan.com/2066385.html?mobile=1 22 两个字符串是否是变位词 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576class Anagram: \"\"\" @:param s1: The first string @:param s2: The second string @:return true or false \"\"\" def Solution1(s1,s2): alist = list(s2) pos1 = 0 stillOK = True while pos1 &lt; len(s1) and stillOK: pos2 = 0 found = False while pos2 &lt; len(alist) and not found: if s1[pos1] == alist[pos2]: found = True else: pos2 = pos2 + 1 if found: alist[pos2] = None else: stillOK = False pos1 = pos1 + 1 return stillOK print(Solution1('abcd','dcba')) def Solution2(s1,s2): alist1 = list(s1) alist2 = list(s2) alist1.sort() alist2.sort() pos = 0 matches = True while pos &lt; len(s1) and matches: if alist1[pos] == alist2[pos]: pos = pos + 1 else: matches = False return matches print(Solution2('abcde','edcbg')) def Solution3(s1,s2): c1 = [0]*26 c2 = [0]*26 for i in range(len(s1)): pos = ord(s1[i])-ord('a') c1[pos] = c1[pos] + 1 for i in range(len(s2)): pos = ord(s2[i])-ord('a') c2[pos] = c2[pos] + 1 j = 0 stillOK = True while j&lt;26 and stillOK: if c1[j] == c2[j]: j = j + 1 else: stillOK = False return stillOK print(Solution3('apple','pleap')) 23 动态规划问题 可参考：动态规划(DP)的整理-Python描述","tags":[{"name":"算法","slug":"算法","permalink":"https://caicaiget.github.io/tags/算法/"}]},{"title":"redis小结","date":"2018-10-20T03:34:10.000Z","path":"post/2018-10-20-redis小结.html","text":"高性能的非关系性数据库redis 在这里进行小结一波。 指令 redis是键值对的数据库，有5中主要数据类型： 字符串类型（string），散列类型（hash），列表类型（list），集合类型（set），有序集合类型（zset） 几个基本的命令： KEYS * 获得当前数据库的所有键 EXISTS key [key …] 判断键是否存在，返回个数，如果key有一样的也是叠加数 DEL key [key …] 删除键，返回删除的个数 TYPE key 获取减值的数据类型（string，hash，list，set，zset） FLUSHALL 清空所有数据库 CONFIG [get、set] redis配置 字符串类型 字符串类型是Redis的最基本类型，它可以存储任何形式的字符串。其它的四种类型都是字符串类型的不同形式。（一般用于：点赞，限流） 最基本的命令：GET、SET 语法：GET key，SET key value value如果有空格需要双引号以示区分 整数递增：INCR 语法：INCR key 默认值为0，所以首先执行命令得到 1 ，不是整型提示错误 增加指定的整数：INCRBY 语法：INCRBY key increment 整数递减：DECR 语法：DECR key 默认值为0，所以首先执行命令得到 -1，不是整型提示错误 减少指定的整数：DECRBY 语法：DECRBY key increment 增加指定浮点数：INCRBYFLOAT 语法：INCRBYFLOAT key increment 与INCR命令类似，只不过可以递增一个双精度浮点数 向尾部追加值：APPEND 语法：APPEND key value redis客户端并不是输出追加后的字符串，而是输出字符串总长度 获取字符串长度：STRLEN 语法：STRLEN key 如果键不存在返回0，注意如果有中文时，一个中文长度是3，redis是使用UTF-8编码中文的 获取多个键值：MGET 语法：MGET key [key …] 例如：MGET key1 key2 设置多个键值：MSET 语法：MSET key value [key value …] 例如：MSET key1 1 key2 “hello redis” 二进制指定位置值：GETBIT 语法：GETBIT key offset 例如：GETBIT key1 2 ，key1为hello 返回 1，返回的值只有0或1，当key不存在或超出实际长度时为0 设置二进制位置值：SETBIT 语法：SETBIT key offset value ，返回该位置的旧值 二进制是1的个数：BITCOUNT 语法：BITCOUNT key [start end] ，start 、end为开始和结束字节 位运算：BITOP 语法：BITOP operation destkey key [key …] ，operation支持AND、OR、XOR、NOT 偏移：BITPOS 语法：BITPOS key bit [start] 散列类型hash 类似与python中的类，一个键对应多个键值对（保存对象） 设置单个：HSET 语法：HSET key field value，不存在时返回1，存在时返回0，没有更新和插入之分 设置多个：HMSET 语法：HMSET key field value [field value …] 读取单个：HGET 语法：HGET key field，不存在是返回nil 读取多个：HMGET 语法：HMGET key field [field …] 读取全部：HGETALL 语法：HGETALL key，返回时字段和字段值的列表 判断字段是否存在：HEXISTS 语法：HEXISTS key field，存在返回1 ，不存在返回0 字段不存在时赋值：HSETNX 语法：HSETNX key field value，与hset命令不同，hsetnx是键不存在时设置值 增加数字：HINCRBY 语法：HINCRBY key field increment ，返回增加后的数，不是整数时会提示错误 删除字段：HDEL 语法：HDEL key field [field …] ，返回被删除字段的个数 只获取字段名：HKEYS 语法：HKEYS key ，返回键的所有字段名 只获取字段值：HVALS 语法：HVALS key ，返回键的所有字段值 字段数量：HLEN 语法：HLEN key ，返回字段总数 列表类型 内部使用双向链表实现，所以获取越接近两端的元素速度越快，但通过索引访问时会比较慢（栈，队列，阻塞队列） 添加左边元素：LPUSH 语法：LPUSH key value [value …] ，返回添加后的列表元素的总个数 添加右边元素：RPUSH 语法：RPUSH key value [value …] ，返回添加后的列表元素的总个数 移除左边第一个元素：LPOP 语法：LPOP key ，返回被移除的元素值 移除右边第一个元素：RPOP 语法：RPOP key ，返回被移除的元素值 列表元素个数：LLEN 语法：LLEN key， 不存在时返回0，redis是直接读取现成的值，并不是统计个数 获取列表片段：LRANGE 语法：LRANGE key start stop，如果start比stop靠后时返回空列表，0 -1 返回整个列表 集合类型 集合类型值具有唯一性，常用操作是向集合添加、删除、判断某个值是否存在，集合内部是使用值为空的散列表实现的。 添加元素：SADD 语法：SADD key member [member …] ，向一个集合添加一个或多个元素，因为集合的唯一性，所以添加相同值时会被忽略。 返回成功添加元素的数量。 删除元素：SREM 语法：SREM key member [member …] 删除集合中一个或多个元素，返回成功删除的个数。 获取全部元素：SMEMBERS 语法：SMEMBERS key ，返回集合全部元素 值是否存在：SISMEMBER 语法：SISMEMBER key member ，如果存在返回1，不存在返回0 差运算：SDIFF 语法：SDIFF key [key …] ，例如：集合A和集合B，差集表示A-B，在A里有的元素B里没有，返回差集合；多个集合(A-B)-C 交运算：SINTER 语法：SINTER key [key …]，返回交集集合，每个集合都有的元素 并运算：SUNION 语法：SUNION key [key …]，返回并集集合，所有集合的元素 集合元素个数：SCARD 语法：SCARD key ，返回集合元素个数 集合运算后存储结果 语法：SDIFFSTROE destination key [key …] ，差运算并存储到destination新集合中 有序集合类型 通过给每个元素加一个score值来判断这个元素的排行位置（可以用于做排行榜） 添加集合元素：ZADD 语法：ZADD key [NX|XX][CH] [INCR] score member [score member …]，不存在添加，存在更新。 获取元素分数：ZSCORE 语法：ZSCORE key member ，返回元素成员的score 分数 元素小到大：ZRANGE 语法：ZRANGE key start top [WITHSCORES] ，参考LRANGE ，加上withscores 返回带元素，即元素，分数 元素大到小：ZREVRANGE 语法：ZREVRANGE key start [WITHSCORES] ，与zrange区别在于zrevrange是从大到小排序 指定分数范围元素：ZRANGEBYSCORE 语法：ZRANGEBYSCORE key min max [WITHSCORE][LIMIT offest count] 返回从小到大的在min和max之间的元素，( 符号表示不包含，例如：80-100，(80 100，withscore返回带分数 ，imit offest count 向左偏移offest个元素，并获取前count个元素 指定分数范围元素：ZREVRANGESCORE 语法：ZREVRANGEBYSCORE key max min [WITHSCORE][LIMIT offest count] 与zrangebyscore类似，只不过该命令是从大到小排序的。 增加分数：ZINCRBY 语法：ZINCRBY key increment member ，注意是增加分数，返回增加后的分数；如果成员不存在，则添加一个为0的成员。 主从复制 配置 master不用修改任何配置 slave修改两条配置（redis.conf）： ​ slaveof master的IP地址 master的端口 ​ masterauth master的口令 redis-cli连自己的Redis服务器（配置完需要重启服务器） info replication —&gt;查看自己的信息，是奴隶还是主人 例如： master信息 role: master connected_slaves:2 slave0:ip=1.2.3.4,port=6379,state=online,offset=548,lag=1 slave1:ip=1.2.3.5,port=6666,state=online,offset=548,lag=1 slave信息 role: slave master_host: master_port: master_link_status: up 配置哨兵（sentinel.conf ） bind 内网IP地址（私有IP地址） sentinel monitor mymaster &lt;master的IP&gt; &lt;master的端口&gt; &lt;投票数量&gt; sentinel down-after-milliseconds mymaster &lt;认定下线时间&gt; sentinel failover-timeout mymaster &lt;恢复超时时间&gt; 启动哨兵 redis-server sentinel.conf --sentinel","tags":[{"name":"redis","slug":"redis","permalink":"https://caicaiget.github.io/tags/redis/"}]},{"title":"linux进阶","date":"2018-10-16T14:35:37.000Z","path":"post/2018-10-16-linux进阶.html","text":"linux成长之路，共勉。 这篇文章中讲了操作系统的发展史，吃水勿忘挖井人。 linux一些进阶命令与使用也有涵盖。 望多多交流。 操作系统发展史 只有硬件没有软件的计算机系统被称之为“裸机”，我们很难用“裸机”来完成计算机日常的工作（如存储和运算），所以必须用特定的软件来控制硬件的工作。最靠近计算机硬件的软件是系统软件，其中最为重要的就是“操作系统”。“操作系统”是控制和管理整个计算机系统的硬件和软件资源，合理的分配资源和调配任务，为系统用户和其他软件提供接口和环境的程序的集合。 没有操作系统（手工操作） 在计算机诞生之初没有操作系统的年代，人们先把程序纸带（或卡片）装上计算机，然后启动输入机把程序和送入计算机，接着通过控制台开关启动程序运行。当程序执行完毕，打印机输出计算的结果，用户卸下并取走纸带（或卡片）。第二个用户上机，重复同样的步骤。在整个过程中用户独占机器，CPU等待手工操作，资源利用率极低。下图是IBM生产的书写Fortran程序的80栏打孔卡，当然这个已经是比较先进的打孔卡了。 批处理系统 首先启动计算机上的一个监督程序，在监督程序的控制下，计算机能够自动的、成批的处理一个或多个用户的作业。完成一批作业后，监督程度又从输入机读取作业存入磁带机。按照上面的步骤重复处理任务。监督程序不停的处理各个作业，实现了作业的自动转接，减少了作业的建立时间和手工操作时间，提高了计算机资源的利用率。 批处理系统又可以分为单道批处理系统、多道批处理系统、联机批处理系统、脱机批处理系统。 分时系统和实时系统 分时系统是把处理器的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。 若某个作业在分配给它的时间片内不能完成其计算，则该作业暂时中断，把处理机让给另一作业使用，等待下一轮调度时再继续其运行。由于计算机速度很快，作业运行轮转得很快，给每个用户的感觉是他独占了一台计算机。而每个用户可以通过自己的终端向系统发出各种操作控制命令，在充分的人机交互情况下，完成作业的运行。为了解决分时系统不能及时响应用户指令的情况，又出现了能够在在严格的时间范围内完成事件处理，及时响应随机外部事件的实时系统。 通用操作系统 1960s：IBM的System/360系列的机器有了统一的操作系统OS/360。 1965年：AT&amp;T的贝尔实验室加入GE和MIT的合作计划开始开发MULTICS。 1969年：Ken Tompson为了玩“Space Travel”游戏用汇编语言在PDP-7上开发了Unics。 1970年~1971年：Ken Tompson和Dennis Ritchie用B语言在PDP-11上重写了Unics，并在Brian Kernighan的建议下将其更名为Unix。 1972年~1973年：Dennis Ritchie发明了C语言来取代可移植性较差的B语言，并开启了用C语言重写Unix的工作。 1974年：Unix推出了里程碑意义的第5版，几乎完全用C语言来实现。 1979年：从Unix第7版开始，AT&amp;T发布新的使用条款，将Unix私有化。 1987年：Andrew S. Tanenbaum教授为了能在课堂上教授学生操作系统运作的细节，决定在不使用任何AT&amp;T的源代码前提下，自行开发与Unix兼容的操作系统，以避免版权上的争议并将其命名为Minix。 1991年：Linus Torvalds就读于芬兰赫尔辛基大学期间，尝试在Minix上做一些开发工作，但因为Minix只是作为教学用途的功能并不强，为了方便在学校的主机的新闻组和邮件系统中读写和下载文件，Linus编写了磁盘驱动程序和文件系统，这些成为了Linux系统内核的雏形。 Ken L. Thompson (ken) Dennis M. Ritchie (DMR) Andrew S. Tanenbaum (ast) Linus B. Torvalds 下图是Unix操作系统家族的图谱。 Linux概述 Linux是一个通用操作系统。一个操作系统要负责任务调度、内存分配、处理外围设备I/O等操作。操作系统通常由内核（运行其他程序，管理像磁盘、打印机等硬件设备的核心程序）和系统程序（设备驱动、底层库、shell、服务程序等）两部分组成。 Linux内核是芬兰人Linus Torvalds开发的，于1991年9月发布。而Linux操作系统作为Internet时代的产物，它是由全世界许多开发者共同合作开发的，是一个自由的操作系统（注意自由和免费并不是同一个概念，想了解二者的差别可以点击这里）。 Linux系统优点 通用操作系统，不跟特定的硬件绑定。 用C语言编写，有可移植性，有内核编程接口。 支持多用户和多任务，支持安全的分层文件系统。 大量的实用程序，完善的网络功能以及强大的支持文档。 可靠的安全性和良好的稳定性，对开发者更友好。 Linux系统发行版本 Redhat Ubuntu CentOS Fedora Debian openSUSE 基础命令 Linux系统的命令通常都是如下所示的格式： 12命令名称 [命名参数] [命令对象] 获取登录信息 - w / who / last。 1234567891011[root@izwz97tbgo9lkabnat2lo8z ~]# w 23:31:16 up 12:16, 2 users, load average: 0.00, 0.01, 0.05USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATroot pts/0 182.139.66.250 23:03 4.00s 0.02s 0.00s wjackfrue pts/1 182.139.66.250 23:26 3:56 0.00s 0.00s -bash[root@izwz97tbgo9lkabnat2lo8z ~]# whoroot pts/0 2018-04-12 23:03 (182.139.66.250)jackfrued pts/1 2018-04-12 23:26 (182.139.66.250)[root@izwz97tbgo9lkabnat2lo8z ~]# who am iroot pts/0 2018-04-12 23:03 (182.139.66.250) 查看自己使用的Shell - ps。 Shell也被称为“壳”，它是用户与内核交流的翻译官，简单的说就是人与计算机交互的接口。目前很多Linux系统默认的Shell都是bash（Bourne Again SHell），因为它可以使用Tab键进行命令补全、可以保存历史命令、可以方便的配置环境变量以及执行批处理操作等。 12345[root@izwz97tbgo9lkabnat2lo8z ~]# ps PID TTY TIME CMD 3531 pts/0 00:00:00 bash 3553 pts/0 00:00:00 ps 查看命令的说明 - whatis。 12345[root@izwz97tbgo9lkabnat2lo8z ~]# whatis psps (1) - report a snapshot of the current processes.[root@izwz97tbgo9lkabnat2lo8z ~]# whatis pythonpython (1) - an interpreted, interactive, object-oriented programming language 查看命令的位置 - which / whereis。 123456789[root@izwz97tbgo9lkabnat2lo8z ~]# whereis psps: /usr/bin/ps /usr/share/man/man1/ps.1.gz[root@izwz97tbgo9lkabnat2lo8z ~]# whereis pythonpython: /usr/bin/python /usr/bin/python2.7 /usr/lib/python2.7 /usr/lib64/python2.7 /etc/python /usr/include/python2.7 /usr/share/man/man1/python.1.gz[root@izwz97tbgo9lkabnat2lo8z ~]# which ps/usr/bin/ps[root@izwz97tbgo9lkabnat2lo8z ~]# which python/usr/bin/python 查看帮助文档 - man / info / apropos。 123456789101112131415161718[root@izwz97tbgo9lkabnat2lo8z ~]# ps --helpUsage: ps [options] Try 'ps --help &lt;simple|list|output|threads|misc|all&gt;' or 'ps --help &lt;s|l|o|t|m|a&gt;' for additional help text.For more details see ps(1).[root@izwz97tbgo9lkabnat2lo8z ~]# man psPS(1) User Commands PS(1)NAME ps - report a snapshot of the current processes.SYNOPSIS ps [options]DESCRIPTION...[root@izwz97tbgo9lkabnat2lo8z ~]# info ps... 切换用户 - su。 123[root@izwz97tbgo9lkabnat2lo8z ~]# su hellokitty[hellokitty@izwz97tbgo9lkabnat2lo8z root]$ 以管理员身份执行命令 - sudo。 123456[jackfrued@izwz97tbgo9lkabnat2lo8z ~]$ ls /rootls: cannot open directory /root: Permission denied[jackfrued@izwz97tbgo9lkabnat2lo8z ~]$ sudo ls /root[sudo] password for jackfrued:calendar.py code error.txt hehe hello.c index.html myconf result.txt 说明：如果希望用户能够以管理员身份执行命令，用户必须被添加到sudoers名单中，该文件在 /etc目录下。 登入登出相关 - logout / exit / adduser / userdel / passwd / ssh。 12345678910111213[root@izwz97tbgo9lkabnat2lo8z ~]# adduser hellokitty[root@izwz97tbgo9lkabnat2lo8z ~]# passwd hellokittyChanging password for user jackfrued.New password:Retype new password:passwd: all authentication tokens updated successfully.[root@izwz97tbgo9lkabnat2lo8z ~]# ssh hellokitty@1.2.3.4hellokitty@1.2.3.4's password:Last login: Thu Apr 12 23:05:32 2018 from 10.12.14.16[hellokitty@izwz97tbgo9lkabnat2lo8z ~]$ logoutConnection to 1.2.3.4 closed.[root@izwz97tbgo9lkabnat2lo8z ~]# 查看系统和主机名 - uname / hostname。 1234567[root@izwz97tbgo9lkabnat2lo8z ~]# unameLinux[root@izwz97tbgo9lkabnat2lo8z ~]# hostnameizwz97tbgo9lkabnat2lo8z[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-releaseCentOS Linux release 7.4.1708 (Core) 重启和关机 - reboot / init 6 / shutdown / init 0。 查看历史命令 - history。 12345678[root@iZwz97tbgo9lkabnat2lo8Z ~]# history...452 ls453 cd Python-3.6.5/454 clear455 history[root@iZwz97tbgo9lkabnat2lo8Z ~]# !454 说明：查看到历史命令之后，可以用!历史命令编号来重新执行该命令；通过history -c可以清除历史命令。 实用程序 文件和文件夹操作 创建/删除目录 - mkdir / rmdir。 1234[root@iZwz97tbgo9lkabnat2lo8Z ~]# mkdir abc[root@iZwz97tbgo9lkabnat2lo8Z ~]# mkdir -p xyz/abc[root@iZwz97tbgo9lkabnat2lo8Z ~]# rmdir abc 创建/删除文件 - touch / rm。 123456[root@iZwz97tbgo9lkabnat2lo8Z ~]# touch readme.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# touch error.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# rm error.txtrm: remove regular empty file ‘error.txt’? y[root@iZwz97tbgo9lkabnat2lo8Z ~]# rm -rf xyz touch命令用于创建空白文件或修改文件时间。在Linux系统中一个文件有三种时间： 更改内容的时间 - mtime。 更改权限的时间 - ctime。 最后访问时间 - atime。 rm的几个重要参数： -i：交互式删除，每个删除项都会进行询问。 -r：删除目录并递归的删除目录中的文件和目录。 -f：强制删除，忽略不存在的文件，没有任何提示。 切换和查看当前工作目录 - cd / pwd。 说明：cd命令后面可以跟相对路径（以当前路径作为参照）或绝对路径（以/开头）来切换到指定的目录，也可以用cd ..来返回上一级目录。 查看目录内容 - ls。 -l：以长格式查看文件和目录。 -a：显示以点开头的文件和目录（隐藏文件）。 -R：遇到目录要进行递归展开（继续列出目录下面的文件和目录）。 -d：只列出目录，不列出其他内容。 -S/-t：按大小/时间排序。 查看文件内容 - cat / head / tail / more / less。 1234567891011121314151617181920212223242526272829[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http://www.sohu.com/ -O sohu.html--2018-06-20 18:42:34-- http://www.sohu.com/Resolving www.sohu.com (www.sohu.com)... 14.18.240.6Connecting to www.sohu.com (www.sohu.com)|14.18.240.6|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 212527 (208K) [text/html]Saving to: ‘sohu.html’100%[==================================================&gt;] 212,527 --.-K/s in 0.03s2018-06-20 18:42:34 (7.48 MB/s) - ‘sohu.html’ saved [212527/212527][root@iZwz97tbgo9lkabnat2lo8Z ~]# cat sohu.html...[root@iZwz97tbgo9lkabnat2lo8Z ~]# head -10 sohu.html&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;搜狐&lt;/title&gt;&lt;meta name=\"Keywords\" content=\"搜狐,门户网站,新媒体,网络媒体,新闻,财经,体育,娱乐,时尚,汽车,房产,科技,图片,论坛,微博,博客,视频,电影,电视剧\"/&gt;&lt;meta name=\"Description\" content=\"搜狐网为用户提供24小时不间断的最新资讯，及搜索、邮件等网络服务。内容包括全球热点事件、突发新闻、时事评论、热播影视剧、体育赛事、行业动态、生活服务信息，以及论坛、博客、微博、我的搜狐等互动空间。\" /&gt;&lt;meta name=\"shenma-site-verification\" content=\"1237e4d02a3d8d73e96cbd97b699e9c3_1504254750\"&gt;&lt;meta charset=\"utf-8\"/&gt;&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge,chrome=1\"/&gt;[root@iZwz97tbgo9lkabnat2lo8Z ~]# tail -2 sohu.html&lt;/body&gt;&lt;/html&gt;[root@iZwz97tbgo9lkabnat2lo8Z ~]# less sohu.html...[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat -n sohu.html | more... 拷贝/移动文件 - cp / mv。 123456789[root@iZwz97tbgo9lkabnat2lo8Z ~]# mkdir backup[root@iZwz97tbgo9lkabnat2lo8Z ~]# cp sohu.html backup/[root@iZwz97tbgo9lkabnat2lo8Z ~]# cd backup[root@iZwz97tbgo9lkabnat2lo8Z backup]# lssohu.html[root@iZwz97tbgo9lkabnat2lo8Z backup]# mv sohu.html sohu_index.html[root@iZwz97tbgo9lkabnat2lo8Z backup]# lssohu_index.html 查找文件和查找内容 - find / grep。 123456789101112131415161718[root@iZwz97tbgo9lkabnat2lo8Z ~]# find / -name \"*.html\"/root/sohu.html/root/backup/sohu_index.html[root@izwz97tbgo9lkabnat2lo8z ~]# find . -atime 7 -type f -print[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -size +2k[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -name \"*.swp\" -delete[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep \"&lt;script&gt;\" sohu.html -n20:&lt;script&gt;[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep -E \\&lt;\\/?script.*\\&gt; sohu.html -n20:&lt;script&gt;22:&lt;/script&gt;24:&lt;script src=\"//statics.itc.cn/web/v3/static/js/es5-shim-08e41cfc3e.min.js\"&gt;&lt;/script&gt;25:&lt;script src=\"//statics.itc.cn/web/v3/static/js/es5-sham-1d5fa1124b.min.js\"&gt;&lt;/script&gt;26:&lt;script src=\"//statics.itc.cn/web/v3/static/js/html5shiv-21fc8c2ba6.js\"&gt;&lt;/script&gt;29:&lt;script type=\"text/javascript\"&gt;52:&lt;/script&gt;... 说明：grep在搜索字符串时可以使用正则表达式，如果需要使用正则表达式可以用grep -E或者直接使用egrep。 链接 - ln。 12345678910111213141516[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 1 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 2 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup2[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 3 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln -s /etc/centos-release sysinfo[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sysinfolrwxrwxrwx 1 root root 19 Jun 20 19:21 sysinfo -&gt; /etc/centos-release[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat sysinfoCentOS Linux release 7.4.1708 (Core)[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-releaseCentOS Linux release 7.4.1708 (Core) 说明：链接可以分为硬链接和软链接（符号链接）。硬链接可以认为是一个指向文件数据的指针，就像Python中对象的引用计数，每添加一个硬链接，文件的对应链接数就增加1，只有当文件的链接数为0时，文件所对应的存储空间才有可能被其他文件覆盖。我们平常删除文件时其实并没有删除硬盘上的数据，我们删除的只是一个指针，或者说是数据的一条使用记录，所以类似于“文件粉碎机”之类的软件在“粉碎”文件时除了删除文件指针，还会在文件对应的存储区域填入数据来保证文件无法再恢复。软链接类似于Windows系统下的快捷方式，当软链接链接的文件被删除时，软链接也就失效了。 压缩/解压缩和归档/解归档 - gzip / gunzip / xz / tar。 123456789101112131415161718192021222324252627282930313233343536[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http://download.redis.io/releases/redis-4.0.10.tar.gz--2018-06-20 19:29:59-- http://download.redis.io/releases/redis-4.0.10.tar.gzResolving download.redis.io (download.redis.io)... 109.74.203.151Connecting to download.redis.io (download.redis.io)|109.74.203.151|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 1738465 (1.7M) [application/x-gzip]Saving to: ‘redis-4.0.10.tar.gz’100%[==================================================&gt;] 1,738,465 70.1KB/s in 74s2018-06-20 19:31:14 (22.9 KB/s) - ‘redis-4.0.10.tar.gz’ saved [1738465/1738465][root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*redis-4.0.10.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip redis-4.0.10.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*redis-4.0.10.tar[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf redis-4.0.10.tarredis-4.0.10/redis-4.0.10/.gitignoreredis-4.0.10/00-RELEASENOTESredis-4.0.10/BUGSredis-4.0.10/CONTRIBUTINGredis-4.0.10/COPYINGredis-4.0.10/INSTALLredis-4.0.10/MANIFESTOredis-4.0.10/Makefileredis-4.0.10/README.mdredis-4.0.10/deps/redis-4.0.10/deps/Makefileredis-4.0.10/deps/README.md...[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*redis-4.0.10.tarredis-4.0.10:00-RELEASENOTES COPYING Makefile redis.conf runtest-sentinel testsBUGS deps MANIFESTO runtest sentinel.conf utilsCONTRIBUTING INSTALL README.md runtest-cluster src 其他工具 - sort / uniq / diff / tr / cut / paste / file / wc。 12345678910111213141516171819202122232425262728293031323334353637383940[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat foo.txtgrapeapplepitaya[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat bar.txt100200300400[root@iZwz97tbgo9lkabnat2lo8Z ~]# paste foo.txt bar.txtgrape 100apple 200pitaya 300 400[root@iZwz97tbgo9lkabnat2lo8Z ~]# paste foo.txt bar.txt &gt; hello.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# cut -b 4-8 hello.txtpe 10le 20aya 30[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat hello.txt | tr '\\t' ','grape,100apple,200pitaya,300,400[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget https://www.baidu.com/img/bd_logo1.png--2018-06-20 18:46:53-- https://www.baidu.com/img/bd_logo1.pngResolving www.baidu.com (www.baidu.com)... 220.181.111.188, 220.181.112.244Connecting to www.baidu.com (www.baidu.com)|220.181.111.188|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 7877 (7.7K) [image/png]Saving to: ‘bd_logo1.png’100%[==================================================&gt;] 7,877 --.-K/s in 0s2018-06-20 18:46:53 (118 MB/s) - ‘bd_logo1.png’ saved [7877/7877][root@iZwz97tbgo9lkabnat2lo8Z ~]# file bd_logo1.pngbd_logo1.png: PNG image data, 540 x 258, 8-bit colormap, non-interlaced[root@iZwz97tbgo9lkabnat2lo8Z ~]# wc sohu.html 2979 6355 212527 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# wc -l sohu.html2979 sohu.html 管道和重定向 管道的使用 - |。 例子：查找当前目录下文件个数。 123[root@iZwz97tbgo9lkabnat2lo8Z ~]# find ./ | wc -l6152 例子：列出当前路径下的文件和文件夹，给每一项加一个编号。 1234567[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls | cat -n 1 dump.rdb 2 mongodb-3.6.5 3 Python-3.6.5 4 redis-3.2.11 5 redis.conf 例子：查找record.log中包含AAA，但不包含BBB的记录的总数 12[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat record.log | grep AAA | grep -v BBB | wc -l 输出重定向和错误重定向 - &gt; / &gt;&gt; / 2&gt;。 123456789101112131415161718[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat readme.txtbananaapplegrapeapplegrapewatermelonpearpitaya[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat readme.txt | sort | uniq &gt; result.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat result.txtapplebananagrapepearpitayawatermelon 输入重定向 - &lt;。 123456789101112[root@iZwz97tbgo9lkabnat2lo8Z ~]# echo 'hello, world!' &gt; hello.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# wall &lt; hello.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]#Broadcast message from root@iZwz97tbgo9lkabnat2lo8Z (Wed Jun 20 19:43:05 2018):hello, world![root@iZwz97tbgo9lkabnat2lo8Z ~]# echo 'I will show you some code.' &gt;&gt; hello.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# wall &lt; hello.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]#Broadcast message from root@iZwz97tbgo9lkabnat2lo8Z (Wed Jun 20 19:43:55 2018):hello, world!I will show you some code. 别名 alias 12345678[root@iZwz97tbgo9lkabnat2lo8Z ~]# alias ll='ls -l'[root@iZwz97tbgo9lkabnat2lo8Z ~]# alias frm='rm -rf'[root@iZwz97tbgo9lkabnat2lo8Z ~]# ll...drwxr-xr-x 2 root root 4096 Jun 20 12:52 abc...[root@iZwz97tbgo9lkabnat2lo8Z ~]# frm abc unalias 1234[root@iZwz97tbgo9lkabnat2lo8Z ~]# unalias frm[root@iZwz97tbgo9lkabnat2lo8Z ~]# frm sohu.html-bash: frm: command not found 其他程序 时间和日期 - date / cal。 12345678910111213141516171819[root@iZwz97tbgo9lkabnat2lo8Z ~]# dateWed Jun 20 12:53:19 CST 2018[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal June 2018Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 910 11 12 13 14 15 1617 18 19 20 21 22 2324 25 26 27 28 29 30[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal 5 2017 May 2017Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 1314 15 16 17 18 19 2021 22 23 24 25 26 2728 29 30 31 录制操作脚本 - script。 给用户发送消息 - mesg / write / wall / mail。 文件系统 文件和路径 命名规则：文件名的最大长度与文件系统类型有关，一般情况下，文件名不应该超过255个字符，虽然绝大多数的字符都可以用于文件名，但是最好使用英文大小写字母、数字、下划线、点这样的符号。文件名中虽然可以使用空格，但应该尽可能避免使用空格，否则在输入文件名时需要用将文件名放在双引号中或者通过\\对空格进行转义。 扩展名：在Linux系统下文件的扩展名是可选的，但是使用扩展名有助于对文件内容的理解。有些应用程序要通过扩展名来识别文件，但是更多的应用程序并不依赖文件的扩展名，就像file命令在识别文件时并不是依据扩展名来判定文件的类型。 隐藏文件：以点开头的文件在Linux系统中是隐藏文件（不可见文件）。 目录结构 /bin - 基本命令的二进制文件。 /boot - 引导加载程序的静态文件。 /dev - 设备文件。 /etc - 配置文件。 /home - 普通用户主目录的父目录。 /lib - 共享库文件。 /lib64 - 共享64位库文件。 /lost+found - 存放未链接文件。 /media - 自动识别设备的挂载目录。 /mnt - 临时挂载文件系统的挂载点。 /opt - 可选插件软件包安装位置。 /proc - 内核和进程信息。 /root - 超级管理员用户主目录。 /run - 存放系统运行时需要的东西。 /sbin - 超级用户的二进制文件。 /sys - 设备的伪文件系统。 /tmp - 临时文件夹。 /usr - 用户应用目录。 /var - 变量数据目录。 访问权限 chmod - 改变文件模式比特。 123456789101112131415[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l...-rw-r--r-- 1 root root 211878 Jun 19 16:06 sohu.html...[root@iZwz97tbgo9lkabnat2lo8Z ~]# chmod g+w,o+w sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l...-rw-rw-rw- 1 root root 211878 Jun 19 16:06 sohu.html...[root@iZwz97tbgo9lkabnat2lo8Z ~]# chmod 644 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l...-rw-r--r-- 1 root root 211878 Jun 19 16:06 sohu.html... 说明：通过上面的例子可以看出，用chmod改变文件模式比特有两种方式：一种是字符设定法，另一种是数字设定法。除了chmod之外，可以通过umask来设定哪些权限将在新文件的默认权限中被删除。 长格式查看目录或文件时显示结果及其对应权限的数值如下表所示。 chown - 改变文件所有者。 12345678910 [root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l...-rw-r--r-- 1 root root 54 Jun 20 10:06 readme.txt...[root@iZwz97tbgo9lkabnat2lo8Z ~]# chown hellokitty readme.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l...-rw-r--r-- 1 hellokitty root 54 Jun 20 10:06 readme.txt... 磁盘管理 列出文件系统的磁盘使用状况 - df。 123456789[root@iZwz97tbgo9lkabnat2lo8Z ~]# df -hFilesystem Size Used Avail Use% Mounted on/dev/vda1 40G 5.0G 33G 14% /devtmpfs 486M 0 486M 0% /devtmpfs 497M 0 497M 0% /dev/shmtmpfs 497M 356K 496M 1% /runtmpfs 497M 0 497M 0% /sys/fs/cgrouptmpfs 100M 0 100M 0% /run/user/0 磁盘分区表操作 - fdisk。 1234567891011121314[root@iZwz97tbgo9lkabnat2lo8Z ~]# fdisk -lDisk /dev/vda: 42.9 GB, 42949672960 bytes, 83886080 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x000a42f4 Device Boot Start End Blocks Id System/dev/vda1 * 2048 83884031 41940992 83 LinuxDisk /dev/vdb: 21.5 GB, 21474836480 bytes, 41943040 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytes 格式化文件系统 - mkfs。 文件系统检查 - fsck。 挂载/卸载 - mount / umount。 编辑器 - vim 启动vim。可以通过vi或vim命令来启动vim，启动时可以指定文件名来打开一个文件，如果没有指定文件名，也可以在保存的时候指定文件名。 12[root@iZwz97tbgo9lkabnat2lo8Z ~]# vim guess.py 命令模式、编辑模式和末行模式：启动vim进入的是命令模式（也称为Normal模式），在命令模式下输入英文字母i会进入编辑模式（Insert模式），屏幕下方出现-- INSERT --提示；在编辑模式下按下Esc会回到命令模式，此时如果输入英文:会进入末行模式，在末行模式下输入q!可以在不保存当前工作的情况下强行退出vim；在命令模式下输入v会进入可视模式（Visual模式），可以用光标选择一个区域再完成对应的操作。 保存和退出vim：在命令模式下输入: 进入末行模式，输入wq可以实现保存退出；如果想放弃编辑的内容输入q!强行退出，这一点刚才已经提到过了；在命令模式下也可以直接输入ZZ实现保存退出。如果只想保存文件不退出，那么可以在末行模式下输入w；可以在w后面输入空格再指定要保存的文件名。 光标操作。 在命令模式下可以通过h、j、k、l来控制光标向左、下、上、右的方向移动，可以在字母前输入数字来表示移动的距离，例如：10h表示向左移动10个字符。 在命令模式下可以通过Ctrl+y和Ctrl+e来实现向上、向下滚动一行文本的操作，可以通过Ctrl+f和Ctrl+b来实现向前和向后翻页的操作。 在命令模式下可以通过输入英文字母G将光标移到文件的末尾，可以通过gg将光标移到文件的开始，也可以通过在G前输入数字来将光标移动到指定的行。 文本操作。 删除：在命令模式下可以用dd来删除整行；可以在dd前加数字来指定删除的行数；可以用d$来实现删除从光标处删到行尾的操作，也可以通过d0来实现从光标处删到行首的操作；如果想删除一个单词，可以使用dw；如果要删除全文，可以在输入:%d（其中:用来从命令模式进入末行模式）。 复制和粘贴：在命令模式下可以用yy来复制整行；可以在yy前加数字来指定复制的行数；可以通过p将复制的内容粘贴到光标所在的地方。 撤销和恢复：在命令模式下输入u可以撤销之前的操作；通过Ctrl+r可以恢复被撤销的操作。 对内容进行排序：在命令模式下输入%!sort。 查找和替换。 查找操作需要输入/进入末行模式并提供正则表达式来匹配与之对应的内容，例如：/doc.*\\.，输入n来向前搜索，也可以输入N来向后搜索。 替换操作需要输入:进入末行模式并指定搜索的范围、正则表达式以及替换后的内容和匹配选项，例如：:1,$s/doc.*/hello/gice，其中： g - global：全局匹配。 i - ignore case：忽略大小写匹配。 c - confirm：替换时需要确认。 e - error：忽略错误。 参数设定：在输入:进入末行模式后可以对vim进行设定。 设置Tab键的空格数：set ts=4 设置显示/不显示行号：set nu / set nonu 设置启用/关闭高亮语法：syntax on / syntax off 设置显示标尺（光标所在的行和列）： set ruler 设置启用/关闭搜索结果高亮：set hls / set nohls 说明：如果希望上面的这些设定在每次启动vim时都能生效，需要将这些设定写到用户主目录下的.vimrc文件中。 高级技巧 比较多个文件。 12[root@iZwz97tbgo9lkabnat2lo8Z ~]# vim -d foo.txt bar.txt 打开多个文件。 12[root@iZwz97tbgo9lkabnat2lo8Z ~]# vim foo.txt bar.txt hello.txt 启动vim后只有一个窗口显示的是foo.txt，可以在末行模式中输入ls查看到打开的三个文件，也可以在末行模式中输入b &lt;num&gt;来显示另一个文件，例如可以用:b 2将bar.txt显示出来，可以用:b 3将hello.txt显示出来。 拆分和切换窗口。 可以在末行模式中输入sp或vs来实现对窗口的水平或垂直拆分，这样我们就可以同时打开多个编辑窗口，通过按两次Ctrl+w就可以实现编辑窗口的切换，在一个窗口中执行退出操作只会关闭对应的窗口，其他的窗口继续保留。 映射快捷键：在vim下可以将一些常用操作映射为快捷键来提升工作效率。 例子1：在命令模式下输入F4执行从第一行开始删除10000行代码的操作。 :map &lt;F4&gt; gg10000dd。 例子2：在编辑模式下输入__main直接补全为if __name__ == '__main__':。 :inoremap __main if __name__ == '__main__': 说明：上面例子2的inoremap中的i表示映射的键在编辑模式使用， nore表示不要递归，这一点非常重要，否则如果键对应的内容中又出现键本身，就会引发递归（相当于进入了死循环）。如果希望映射的快捷键每次启动vim时都能生效，需要将映射写到用户主目录下的.vimrc文件中。 录制宏。 在命令模式下输入qa开始录制宏（其中a是寄存器的名字，也可以是其他英文字母或0-9的数字）。 执行你的操作（光标操作、编辑操作等），这些操作都会被录制下来。 如果录制的操作已经完成了，按q结束录制。 通过@a（a是刚才使用的寄存器的名字）播放宏，如果要多次执行宏可以在前面加数字，例如100@a表示将宏播放100次。 可以试一试下面的例子来体验录制宏的操作，该例子来源于Harttle Land网站，该网站上提供了很多关于vim的使用技巧，有兴趣的可以去了解一下。 软件安装和配置 使用包管理工具 yum - Yellowdog Updater Modified。 yum search：搜索软件包，例如yum search nginx。 yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。 yum install：安装软件包，例如yum install nginx。 yum remove：删除软件包，例如yum remove nginx。 yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。 yum check-update：检查有哪些可以更新的软件包。 yum info：显示软件包的相关信息，例如yum info nginx。 rpm - Redhat Package Manager。 安装软件包：rpm -ivh &lt;packagename&gt;.rpm。 移除软件包：rpm -e &lt;packagename&gt;。 查询软件包：rpm -qa，例如可以用rpm -qa | grep mysql来检查是否安装了MySQL相关的软件包。 下面以Nginx为例，演示如何使用yum安装软件。 12345678910111213141516171819202122232425262728293031323334[root@iZwz97tbgo9lkabnat2lo8Z ~]# yum -y install nginx...Installed: nginx.x86_64 1:1.12.2-2.el7Dependency Installed: nginx-all-modules.noarch 1:1.12.2-2.el7 nginx-mod-http-geoip.x86_64 1:1.12.2-2.el7 nginx-mod-http-image-filter.x86_64 1:1.12.2-2.el7 nginx-mod-http-perl.x86_64 1:1.12.2-2.el7 nginx-mod-http-xslt-filter.x86_64 1:1.12.2-2.el7 nginx-mod-mail.x86_64 1:1.12.2-2.el7 nginx-mod-stream.x86_64 1:1.12.2-2.el7Complete![root@iZwz97tbgo9lkabnat2lo8Z ~]# yum info nginxLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfileInstalled PackagesName : nginxArch : x86_64Epoch : 1Version : 1.12.2Release : 2.el7Size : 1.5 MRepo : installedFrom repo : epelSummary : A high performance web server and reverse proxy serverURL : http://nginx.org/License : BSDDescription : Nginx is a web server and a reverse proxy server for HTTP, SMTP, POP3 and : IMAP protocols, with a strong focus on high concurrency, performance and low : memory usage.[root@iZwz97tbgo9lkabnat2lo8Z ~]# nginx -vnginx version: nginx/1.12.2 移除Nginx。 123[root@iZwz97tbgo9lkabnat2lo8Z ~]# nginx -s stop[root@iZwz97tbgo9lkabnat2lo8Z ~]# yum -y remove nginx 下面以MySQL为例，演示如何使用rpm安装软件。要安装MySQL需要先到MySQL官方网站下载对应的RPM文件，当然要选择和你使用的Linux系统对应的版本。MySQL现在是Oracle公司旗下的产品，在MySQL被收购后，MySQL的作者重新制作了一个MySQL的分支MariaDB，可以通过yum进行安装。如果要安装MySQL需要先通过yum删除mariadb-libs这个可能会跟MySQL底层库冲突的库，然后还需要安装一个名为libaio的依赖库。 123456789101112[root@iZwz97tbgo9lkabnat2lo8Z mysql]# lsmysql-community-client-5.7.22-1.el7.x86_64.rpmmysql-community-common-5.7.22-1.el7.x86_64.rpmmysql-community-libs-5.7.22-1.el7.x86_64.rpmmysql-community-server-5.7.22-1.el7.x86_64.rpm[root@iZwz97tbgo9lkabnat2lo8Z mysql]# yum -y remove mariadb-libs[root@iZwz97tbgo9lkabnat2lo8Z mysql]# yum -y install libaio[root@iZwz97tbgo9lkabnat2lo8Z mysql]# ls | xargs rpm -ivhwarning: mysql-community-client-5.7.22-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEYPreparing... ################################# [100%]... 说明：由于MySQL和MariaDB的底层依赖库是有冲突的，所以上面我们首先用yum移除了名为mariadb-libs的依赖库并安装了名为libaio的依赖库。由于我们将安装MySQL所需的rpm文件放在一个独立的目录中，所以可以通过ls命令查看到安装文件并用xargs将ls的输出作为参数交给rpm -ivh来进行安装。关于MySQL和MariaDB之间的关系，可以阅读维基百科上关于MariaDB的介绍。 移除安装的MySQL。 12[root@iZwz97tbgo9lkabnat2lo8Z ~]# rpm -qa | grep mysql | xargs rpm -e 下载解压配置环境变量 下面以安装MongoDB为例，演示这类软件应该如何安装。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgz--2018-06-21 18:32:53-- https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgzResolving fastdl.mongodb.org (fastdl.mongodb.org)... 52.85.83.16, 52.85.83.228, 52.85.83.186, ...Connecting to fastdl.mongodb.org (fastdl.mongodb.org)|52.85.83.16|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 100564462 (96M) [application/x-gzip]Saving to: ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’100%[==================================================&gt;] 100,564,462 630KB/s in 2m 9s2018-06-21 18:35:04 (760 KB/s) - ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’ saved [100564462/100564462][root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip mongodb-linux-x86_64-rhel70-3.6.5.tgz[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf mongodb-linux-x86_64-rhel70-3.6.5.tarmongodb-linux-x86_64-rhel70-3.6.5/READMEmongodb-linux-x86_64-rhel70-3.6.5/THIRD-PARTY-NOTICESmongodb-linux-x86_64-rhel70-3.6.5/MPL-2mongodb-linux-x86_64-rhel70-3.6.5/GNU-AGPL-3.0mongodb-linux-x86_64-rhel70-3.6.5/bin/mongodumpmongodb-linux-x86_64-rhel70-3.6.5/bin/mongorestoremongodb-linux-x86_64-rhel70-3.6.5/bin/mongoexportmongodb-linux-x86_64-rhel70-3.6.5/bin/mongoimportmongodb-linux-x86_64-rhel70-3.6.5/bin/mongostatmongodb-linux-x86_64-rhel70-3.6.5/bin/mongotopmongodb-linux-x86_64-rhel70-3.6.5/bin/bsondumpmongodb-linux-x86_64-rhel70-3.6.5/bin/mongofilesmongodb-linux-x86_64-rhel70-3.6.5/bin/mongoreplaymongodb-linux-x86_64-rhel70-3.6.5/bin/mongoperfmongodb-linux-x86_64-rhel70-3.6.5/bin/mongodmongodb-linux-x86_64-rhel70-3.6.5/bin/mongosmongodb-linux-x86_64-rhel70-3.6.5/bin/mongomongodb-linux-x86_64-rhel70-3.6.5/bin/install_compass[root@iZwz97tbgo9lkabnat2lo8Z ~]# vim .bash_profile...PATH=$PATH:$HOME/bin:$HOME/mongodb-linux-x86_64-rhel70-3.6.5/binexport PATH...[root@iZwz97tbgo9lkabnat2lo8Z ~]# source .bash_profile[root@iZwz97tbgo9lkabnat2lo8Z ~]# mongod --versiondb version v3.6.5git version: a20ecd3e3a174162052ff99913bc2ca9a839d618OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013allocator: tcmallocmodules: nonebuild environment: distmod: rhel70 distarch: x86_64 target_arch: x86_64[root@iZwz97tbgo9lkabnat2lo8Z ~]# mongo --versionMongoDB shell version v3.6.5git version: a20ecd3e3a174162052ff99913bc2ca9a839d618OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013allocator: tcmallocmodules: nonebuild environment: distmod: rhel70 distarch: x86_64 target_arch: x86_64 说明：当然也可以通过yum来安装MongoDB，具体可以参照官方网站上给出的说明。 源代码构建安装 安装Python 3.6。 123456789101112131415[root@iZwz97tbgo9lkabnat2lo8Z ~]# yum install gcc[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz[root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip Python-3.6.5.tgz[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf Python-3.6.5.tar[root@iZwz97tbgo9lkabnat2lo8Z ~]# cd Python-3.6.5[root@iZwz97tbgo9lkabnat2lo8Z ~]# ./configure --prefix=/usr/local/python36 --enable-optimizations[root@iZwz97tbgo9lkabnat2lo8Z ~]# yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel[root@iZwz97tbgo9lkabnat2lo8Z ~]# make &amp;&amp; make install... 配置环境变量 ...[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln -s /usr/local/python36/bin/python3.6 /usr/bin/python3[root@iZwz97tbgo9lkabnat2lo8Z ~]# python3 --versionPython 3.6.5[root@iZwz97tbgo9lkabnat2lo8Z ~]# python3 -m pip install -U pip[root@iZwz97tbgo9lkabnat2lo8Z ~]# pip3 --version 安装Redis-3.2.12。 12345678910[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http://download.redis.io/releases/redis-3.2.12.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip redis-3.2.12.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf redis-3.2.12.tar[root@iZwz97tbgo9lkabnat2lo8Z ~]# cd redis-3.2.12[root@iZwz97tbgo9lkabnat2lo8Z ~]# make &amp;&amp; make install[root@iZwz97tbgo9lkabnat2lo8Z ~]# redis-server --versionRedis server v=3.2.12 sha=00000000:0 malloc=jemalloc-4.0.3 bits=64 build=5bc5cd3c03d6ceb6[root@iZwz97tbgo9lkabnat2lo8Z ~]# redis-cli --versionredis-cli 3.2.12 配置服务 启动服务。 12[root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl start firewalld 终止服务。 12[root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl stop firewalld 重启服务。 12[root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl restart firewalld 查看服务。 12[root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl status firewalld 设置是否开机自启。 1234567[root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl enable firewalldCreated symlink from /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service to /usr/lib/systemd/system/firewalld.service.Created symlink from /etc/systemd/system/multi-user.target.wants/firewalld.service to /usr/lib/systemd/system/firewalld.service.[root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl disable firewalldRemoved symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service. 计划任务 crontab命令。 1234[root@iZwz97tbgo9lkabnat2lo8Z ~]# crontab -e* * * * * echo \"hello, world!\" &gt;&gt; /root/hello.txt59 23 * * * rm -f /root/*.log 说明：输入crontab -e命令会打开vim来编辑Cron表达式并指定触发的任务，上面我们定制了两个计划任务，一个是每分钟向/root目录下的hello.txt中追加输出hello, world!；另一个是每天23时59分执行删除/root目录下以log为后缀名的文件。如果不知道Cron表达式如何书写，可以参照/etc/crontab文件中的提示（下面会讲到）或者用谷歌或百度搜索一下，也可以使用Cron表达式在线生成器来生成Cron表达式。 crontab相关文件。 1234567891011121314151617181920212223242526[root@iZwz97tbgo9lkabnat2lo8Z ~]# cd /etc[root@iZwz97tbgo9lkabnat2lo8Z etc]# ls -l | grep cron-rw-------. 1 root root 541 Aug 3 2017 anacrontabdrwxr-xr-x. 2 root root 4096 Mar 27 11:56 cron.ddrwxr-xr-x. 2 root root 4096 Mar 27 11:51 cron.daily-rw-------. 1 root root 0 Aug 3 2017 cron.denydrwxr-xr-x. 2 root root 4096 Mar 27 11:50 cron.hourlydrwxr-xr-x. 2 root root 4096 Jun 10 2014 cron.monthly-rw-r--r-- 1 root root 493 Jun 23 15:09 crontabdrwxr-xr-x. 2 root root 4096 Jun 10 2014 cron.weekly[root@iZwz97tbgo9lkabnat2lo8Z etc]# vim crontab 1 SHELL=/bin/bash 2 PATH=/sbin:/bin:/usr/sbin:/usr/bin 3 MAILTO=root 4 5 # For details see man 4 crontabs 6 7 # Example of job definition: 8 # .---------------- minute (0 - 59) 9 # | .------------- hour (0 - 23) 10 # | | .---------- day of month (1 - 31) 11 # | | | .------- month (1 - 12) OR jan,feb,mar,apr ... 12 # | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat 13 # | | | | | 14 # * * * * * user-name command to be executed 通过修改/etc目录下的crontab文件也能够定制计划任务。 网络访问和管理 通过网络获取资源 - wget。 -b 后台下载模式 -O 下载到指定的目录 -r 递归下载 显示/操作网络配置（旧） - ifconfig。 123456789[root@iZwz97tbgo9lkabnat2lo8Z ~]# ifconfig eth0eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 172.18.61.250 netmask 255.255.240.0 broadcast 172.18.63.255 ether 00:16:3e:02:b6:46 txqueuelen 1000 (Ethernet) RX packets 1067841 bytes 1296732947 (1.2 GiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 409912 bytes 43569163 (41.5 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 显示/操作网络配置（新） - ip。 12345678910[root@iZwz97tbgo9lkabnat2lo8Z ~]# ip address1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:16:3e:02:b6:46 brd ff:ff:ff:ff:ff:ff inet 172.18.61.250/20 brd 172.18.63.255 scope global eth0 valid_lft forever preferred_lft forever 网络可达性检查 - ping。 123456789[root@iZwz97tbgo9lkabnat2lo8Z ~]# ping www.baidu.com -c 3PING www.a.shifen.com (220.181.111.188) 56(84) bytes of data.64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=1 ttl=51 time=36.3 ms64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=2 ttl=51 time=36.4 ms64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=3 ttl=51 time=36.4 ms--- www.a.shifen.com ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 2002msrtt min/avg/max/mdev = 36.392/36.406/36.427/0.156 ms 查看网络服务和端口 - netstat。 12[root@iZwz97tbgo9lkabnat2lo8Z ~]# netstat -nap | grep nginx 安全文件拷贝 - scp。 12[root@iZwz97tbgo9lkabnat2lo8Z ~]# scp root@1.2.3.4:/root/guido.jpg hellokitty@4.3.2.1:/home/hellokitty/pic.jpg 安全文件传输 - sftp。 12345[root@iZwz97tbgo9lkabnat2lo8Z ~]# sftp root@120.77.222.217root@120.77.222.217's password:Connected to 120.77.222.217.sftp&gt; help：显示帮助信息。 ls/lls：显示远端/本地目录列表。 cd/lcd：切换远端/本地路径。 mkdir/lmkdir：创建远端/本地目录。 pwd/lpwd：显示远端/本地当前工作目录。 get：下载文件。 put：上传文件。 rm：删除远端文件。 bye/exit/quit：退出sftp。 进程管理 ps - 查询进程。 123456789[root@iZwz97tbgo9lkabnat2lo8Z ~]# ps -efUID PID PPID C STIME TTY TIME CMDroot 1 0 0 Jun23 ? 00:00:05 /usr/lib/systemd/systemd --switched-root --system --deserialize 21root 2 0 0 Jun23 ? 00:00:00 [kthreadd]...[root@iZwz97tbgo9lkabnat2lo8Z ~]# ps -ef | grep mysqldroot 4943 4581 0 22:45 pts/0 00:00:00 grep --color=auto mysqldmysql 25257 1 0 Jun25 ? 00:00:39 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid kill - 终止进程。 123[root@iZwz97tbgo9lkabnat2lo8Z ~]# kill 1234[root@iZwz97tbgo9lkabnat2lo8Z ~]# kill -9 1234 例子：用一条命令强制终止正在运行的Redis进程。 12ps -ef | grep redis | grep -v grep | awk '&#123;print $2&#125;' | xargs kill 将进程置于后台运行。 Ctrl+Z &amp; 123456[root@iZwz97tbgo9lkabnat2lo8Z ~]# mongod &amp;[root@iZwz97tbgo9lkabnat2lo8Z ~]# redis-server...^Z[4]+ Stopped redis-server jobs - 查询后台进程。 12345[root@iZwz97tbgo9lkabnat2lo8Z ~]# jobs[2] Running mongod &amp;[3]- Stopped cat[4]+ Stopped redis-server bg - 让进程在后台继续运行。 1234567[root@iZwz97tbgo9lkabnat2lo8Z ~]# bg %4[4]+ redis-server &amp;[root@iZwz97tbgo9lkabnat2lo8Z ~]# jobs[2] Running mongod &amp;[3]+ Stopped cat[4]- Running redis-server &amp; fg - 将后台进程置于前台。 12345678[root@iZwz97tbgo9lkabnat2lo8Z ~]# fg %4redis-server^C5554:signal-handler (1530025281) Received SIGINT scheduling shutdown...5554:M 26 Jun 23:01:21.413 # User requested shutdown...5554:M 26 Jun 23:01:21.413 * Saving the final RDB snapshot before exiting.5554:M 26 Jun 23:01:21.415 * DB saved on disk5554:M 26 Jun 23:01:21.415 # Redis is now ready to exit, bye bye... 说明：置于前台的进程可以使用Ctrl+C来终止它。 top - 进程监控。 12345678[root@iZwz97tbgo9lkabnat2lo8Z ~]# toptop - 23:04:23 up 3 days, 14:10, 1 user, load average: 0.00, 0.01, 0.05Tasks: 65 total, 1 running, 64 sleeping, 0 stopped, 0 zombie%Cpu(s): 0.3 us, 0.3 sy, 0.0 ni, 99.3 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 stKiB Mem : 1016168 total, 191060 free, 324700 used, 500408 buff/cacheKiB Swap: 0 total, 0 free, 0 used. 530944 avail Mem... 系统性能 查看系统活动信息 - sar。 查看内存使用情况 - free。 12345[root@iZwz97tbgo9lkabnat2lo8Z ~]# free total used free shared buff/cache availableMem: 1016168 323924 190452 356 501792 531800Swap: 0 0 0 查看进程使用内存状况 - pmap。 123456789101112131415[root@iZwz97tbgo9lkabnat2lo8Z ~]# ps PID TTY TIME CMD 4581 pts/0 00:00:00 bash 5664 pts/0 00:00:00 ps[root@iZwz97tbgo9lkabnat2lo8Z ~]# pmap 45814581: -bash0000000000400000 884K r-x-- bash00000000006dc000 4K r---- bash00000000006dd000 36K rw--- bash00000000006e6000 24K rw--- [ anon ]0000000001de0000 400K rw--- [ anon ]00007f82fe805000 48K r-x-- libnss_files-2.17.so00007f82fe811000 2044K ----- libnss_files-2.17.so... 报告设备CPU和I/O统计信息 - iostat。 12345678[root@iZwz97tbgo9lkabnat2lo8Z ~]# iostatLinux 3.10.0-693.11.1.el7.x86_64 (iZwz97tbgo9lkabnat2lo8Z) 06/26/2018 _x86_64_ (1 CPU)avg-cpu: %user %nice %system %iowait %steal %idle 0.79 0.00 0.20 0.04 0.00 98.97Device: tps kB_read/s kB_wrtn/s kB_read kB_wrtnvda 0.85 6.78 21.32 2106565 6623024vdb 0.00 0.01 0.00 2088 0 Shell和Shell编程 环境变量 HOME SHELL HISTSIZE RANDOM PATH","tags":[{"name":"linux进阶","slug":"linux进阶","permalink":"https://caicaiget.github.io/tags/linux进阶/"}]},{"title":"mysql进阶","date":"2018-10-16T12:10:37.000Z","path":"post/2018-10-16-mysql进阶.html","text":"mysql的进阶知识，加油！ 当心从删库到跑路 ？！！ 编码与约束 设置编码 123-- utf8_bin 搜索时区分大小写-- utf8_bin_ci 搜索时不区分大小写create database SRS default charset utf8 collate utf8_bin; 设置数据SRS的默认编码为utf8 collate utf8_bin; —&gt; mysql的字符序遵从命名惯例。以_ci(表示大小写不敏感)，以_cs(表示大小写敏感)，以_bin(表示用编码值进行比较 创建一个学院表 1234567891011121314151617-- 创建学院表create table tb_college(collid int not null auto_increment comment &apos;学院编号&apos;,collname varchar(50) not null comment &apos;学院名称&apos;,collmaster varchar(20) not null comment &apos;院长姓名&apos;,collweb varchar(511) default &apos;&apos; comment &apos;学院网站&apos;,primary key (collid));-- 创建教师表create table tb_teacher(teaid int not null comment &apos;教师工号&apos;,tname varchar(20) not null comment &apos;教师姓名&apos;,title varchar(10) default &apos;&apos; comment &apos;职称&apos;,collid int not null comment &apos;所属学院编号&apos;); 添加唯一约束 代表该列值不能有重复 12345-- 添加唯一约束alter table tb_college add constraint uni_college_collname unique (collname);-- 删除唯一约束alter table tb_college drop index uni_college_collname 添加外键约束 外键分为 1 对 1：对任一表添加外键，并且还要添加唯一约束 1 对 多： 一般在多的表中添加外键 多 对 多 ：在关系型数据中，两张表不能表示两张表的关系，多对多时需要添加中间表进行外键约束 给教师表添加外键约束collid 1234-- 添加外键约束alter table tb_student add constraint fk_student_collid foreign key (collid) references tb_college (collid);-- 删除外键约束alter table tb_score drop foreign key fk_score_sid; E-R(实体关系图) 外键/外键约束/ - 外来的主键 - 参照完整性 数据的完整性 实体完整性：每一条记录都是独一无二的冗余 主键/唯一索引(唯一约束) 参照完整性：B表参照了A表，A表没有的记录在B表中绝不能出现 出现 外键：给字表添加外键时要与父表的主键变量类型一致一致 域完整性：录入的数据都是有效的 数据类型/非空约束/默认值约束/检查约束（mysql不生效） 查询 查询时sql语句的执行优先顺序 FROM WHERE GROUP BY HAVING SELECT DISTINCT UNION ORDER BY 聚合函数 12345-- max() / min() / sum() / avg() / count()elect min(birth) from tb_studentselect max(birth) from tb_student-- 这些二函数经常与 group by 连用 连接查询法 查询时如果不添加筛选条件得到的结果会形成笛卡儿积 1234567891011-- 查询学生姓名、所选课程名称和成绩(连接查询)-- 连接查询方法一select sname,cname,markfrom tb_student,tb_course,tb_scorewhere stuid=sid and couid=cid and mark is not null;-- 连接查询方法二select sname,cname,mark from tb_studentinner join tb_score on stuid=sidinner join tb_course on couid=cidwhere mark is not null; group by 分组查询 安照 by 后面的列名进行分组查询 1234-- 查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算)-- () 改变优先级,先执行()里的语句select sname from tb_student where stuid in( select sid from tb_score group by sid having count(sid)&gt;2); 子查询 123-- 子查询 - 在一个查询中又使用了另一个查询-- 查询年龄最大的学生的姓名(子查询+运算)select sname as 姓名,year(now())-year(birth) as 年龄 from tb_student where birth=(select min(birth) from tb_student) 子查询时，去重操作和集合运算效率是非常底下的 通常建议去用exists或not exists 操作来代替去重和集合运算 123456-- 去重和集合select ename as 主管,job from tbempwhere eno in (select distinct mgr from tbemp where mgr is not null);-- exists 判断select ename,job from tbemp t1where exists (select &apos;x&apos; from tbemp t2 where t1.eno=t2.mgr); 当后面where语句的条件为true时才会生成映射表x列，为false时映射表为空 1select &apos;x&apos; from tbemp t2,tbemp t1 where t1.ename=t2.mgr; 视图 视图是查询的快照 通过视图将用户表访问权限进一步加以限制，也就是说将来普通用户不能够直接查询表的数据，只能通过指定的视图查看到允许访问的内容。 123456-- 创建视图 -- 得到一个（ename,dno,dname）列的数据表create view vw_emp_gt_avg as select ename,dno,dname from tbemp -- 删除视图drop view 删除视图-- 这个语句是查询 vw_emp_gt_avg 表，select * from vw_emp_gt_avg; 索引 索引（相当于一本书的目录） 为表创建索引可以加速查询（用空间换取时间） 索引虽然好但是不能滥用，一方面索引会占用额外的存储空间 另外索引会让增删改变得更慢，因为这些操作可能会导致更新索引 如果哪个列经常用于查询的筛选条件，那么就应该在这个列上建立索引 主键有默认的索引（唯一索引) 12345678-- 创建索引-- 说明：如果使用模糊查询 如果查询条件不以%开头 那么索引有效-- 如果模糊查询的条件以%开头 那么索引失效（尽量避免）create index idx_emp_ename on tbemp (ename);create unique index nui_emp_ename on tbemp (ename);-- 删除索引alter table tbemp drop index nui_emp_ename 事务控制 事务控制：要么全部成功执行，要么一个不执行 数据的一致性：事务 事务的ACID特性： Atomicity 原子性：不可分割 Consistency 一致性：事务前后数据状态一致 Isolation 隔离性：多个事务不能看到彼此的中间状态（未提交时别人看不到对表的改变） Duration 持久性：事务完成后数据要持久化 在出现并发事务访问数据的时候，数据库底层有锁机制来保护数据，但是通常我们在写SQL的时候不用显示的书写锁操作，数据库会根据我们设定的事务隔离级别自动的数据加锁。 并发数据访问可能出现的5中问题 第一类丢失更新 第二类丢失更新 脏读 ： 隔离级别为Read Committed可以避免 不可重复读 - 一个事务在读取查询结果时发现其他事务更新了数据导致无法读取： 隔离级别为Repeatable Read可以避免 幻读 - 一个事务在执行查询时发现被其他事务提交了新的数据： 隔离级别为Serializable可以避免 1234567891011121314151617begin-- start transaction; 开始事务update tb_score set mark=mark-2 where sid=1001 and mark is not null;update tb_score set mark=mark+2 where sid=1002 and mark is not null;-- 数据提交,只有提交后才生效commit;-- 事务回滚 - 未提交时可以回滚rollback;-- 四个级别-- Read Uncommitted-- Read Committed-- Repeatable Read-- Serializableselect @@tx_isolation; -- 查看事务隔离级别session(当前会话)/global（全局）set session/global transaction isolation level read committed; -- 设置事务隔离级别 创建用户 1234567891011121314151617181920-- 只能本机登录create user &apos;hellokitty&apos;@&apos;localhost&apos;-- 指定ip地址登录create user &apos;hellokitty&apos;@&apos;10.2.1.1&apos;-- 任意地址登录 并设置口令123123create user &apos;hellokitty&apos;@&apos;%&apos;identified by &apos;123123&apos;-- 授权 *.* 所有数据库的所有表grant select on srs.* to &apos;hellokitty&apos;@&apos;%&apos;;grant insert,delete,update on srs.* to &apos;hellokitty&apos;@&apos;%&apos;;grant create,drop,alter on srs.* to &apos;hellokitty&apos;@&apos;%&apos;;-- all privileges 所有权限-- with grant option 拥有将自己的权限授权给他人的权限grant all privileges on srs.* to &apos;hellokitty&apos;@&apos;%&apos; with grant option;-- 召回权限revoke all privileges on srs.* from &apos;hellokitty&apos;@&apos;%&apos;; python控制mysql 利用第三方模块pymysql charset：设置编码 autocommit：自动提交，不用自己写commit query参数中的变量可以用占位符%s，args的参数会识别占位符并附对应的值 如果需要改变传值的顺序，可以用一个字典 更新表 123456789101112131415161718192021222324252627import pymysql# https://pypi.doubanio.com/simple 国内镜像def main(): # 1. 创建数据库连接 cur = pymysql.connect(host = \"localhost\", port = 3306, user = \"root\", password = \"123456\", db = \"hrs\", charset= \"utf8\", autocommit = True) try: with cur.cursor() as cursor: no = int(input('部门编号：')) name = input('部门名称：') location = input('部门所在地：') # query=update tbdept set dname=%s, dloc=%s where dno=%s # args=（no, name, location） result = cursor.execute( query='update tbdept set dname=%(name)s,dloc=%(location)s where dno=%(no)s', args=&#123;'no':no, 'name': name, 'location': location&#125;) if result == 1: print(\"操作成功\") # cur.commit() finally: cur.close()if __name__ == '__main__': main() 查询表 cursorclass=pymysql.cursors.DictCursor ：游标查询默认返回元组，使用这个后返回一个以字典为元素的列表 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import pymysql# https://pypi.doubanio.com/simple 国内镜像class Dept: def __init__(self, no, name, location): self.no = no self.name = name self.location = locationdef main(): # 1. 创建数据库连接 cur = pymysql.connect(host = \"localhost\", port = 3306, user = \"root\", password = \"123456\", db = \"hrs\", charset= \"utf8\", autocommit = True, cursorclass=pymysql.cursors.DictCursor) try: with cur.cursor() as cursor: # update tbdept set dname=%s, dloc=%s where dno=%s cursor.execute( \"select dno as no, dname as name, dloc as location \" \"from tbdept\") # print(cursor.fetchall()) 拿所有 print(cursor.fetchone()) # 拿一个 print(cursor.fetchmany(2)) # 拿指定条数 print('编号\\t名称\\t所在地') for row in cursor.fetchall(): dept = Dept(**row) # **row ：解包 将一个自建解包为一个关键字参数传入类中 print(dept.no, end='\\t') print(dept.name, end='\\t') print(dept.location) # print(row['no'], end='\\t') # print(row['name'], end='\\t') # print(row['location']) # for row in cursor.fetchall(): # print(f'部门编号：&#123;row[0]&#125;') # print(f'部门名称：&#123;row[1]&#125;') # print(f'部门所在地：&#123;row[2]&#125;') # print('-' * 20) # cur.commit() finally: cur.close()if __name__ == '__main__': main()","tags":[{"name":"mysql进阶","slug":"mysql进阶","permalink":"https://caicaiget.github.io/tags/mysql进阶/"}]},{"title":"正则表达式","date":"2018-10-15T13:28:15.000Z","path":"post/2018-10-15-正则表达式.html","text":"正则不管在哪里都是吃香的存在 小结正则命令 正则语法 . 匹配一个任意字符 – … 代表两个任意字符 \\w 匹配字母数字下划线还有中文字符 . 匹配一个任意字符 – … 代表两个任意字符 \\w 匹配字母数字下划线还有中文字符 \\s 匹配空白字符(空白指空格，制表符，和回车等所有能产生空白的字符) \\d 匹配一个数字字符 \\b 检测是否是单词边界(单词的开头，单词的结尾,单词和单词之间的标点空格等) ^ 检测字符串是否以给定的正则表达式开头，例如^a —a开头的字符串 $ 检测字符串是否以给定的正则表达式结尾 \\W 非字母，数字，下划线 \\D 非数字 [] 匹配中括号中出现的任意字符(一个中括号只匹配一个字符) [0-9] 匹配一个0-9的数字 [^] 匹配不在[]字符集中的任意一个字符 * 匹配0次或者多次 + 匹配1次或者多次 ? 匹配0次或1次 {N,} 至少匹配N次 {,M} 最多匹配M次 {M,N} 匹配至少M次，最多N次（N&gt;M） | 分之(相当于逻辑运算中的or) () 通过加()来对正则条件进行分组 \\1… 可以通过 ‘’\\数字&quot; 来重复匹配前面的分组中匹配的结果。数字的值代表前面的第几个分组","tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"https://caicaiget.github.io/tags/正则表达式/"}]},{"title":"MYSQL小结","date":"2018-10-15T10:49:25.000Z","path":"post/2018-10-15-mysql小结.html","text":"通过数据库可以实现数据的持久化 这里总结一下常用语法 MYSQL小结 1. 什么是数据库 数据库 - database - 数据的仓库(集散地) 2. 为什么要用数据库 通过数据库可以让数据持久化 当我们做数据持久化时不仅仅是希望能够把数据长久的保存起来 更为重要的是希望方便的管理数据，在需要数据的时候能够很方便的把数据取出来 理论基础：关系代数和集合论 具体表现：用二维表组织数据 3. 常用命命令 – SQL（structured query language） – DDL（数据定义语言）：create/drop/alter – DML（数据操作语言）：insert/delete/update/select – DCL（数据控制语言）：grant/revoke 创建数据库 - create database 数据库名 default charset utf8（设置编码） 显示所有数据库 - show databases 删除数据库 - drop database if exists 数据库名（慎重） 选中数据库 - use 数据库名 显示所有表 - show tables 查看数据表结构 - show columns from 表名 创建表 - create table 表名 1234567891011121314151617-- 创建二维表保存数据-- 列名 数据类型 约束条件-- 非空约束 - not null-- 默认值约束 - default-- 主键 - 表中能够唯一标识一条记录的列-- 主键约束 - primary key-- 自增长 - auto_increment（需与primary key连用）-- 备注 - comment &apos;&apos;create table tb_student(stuid int not null, stuname varchar(4) not null, gender bit default 1, birth date, addr varchar(50),primary key (stuid) ); 关于char 和 varchar 的区别 char的长度是不可变的，varchar的长度是可变的 例如：定义一个char[10]和varchar[10],如果存进去的是‘csdn’,那么char所占的长度依然为10，除了字符‘csdn’外，后面跟六个空格，而varchar就立马把长度变为4了，取数据的时候，char类型的要用trim()去掉多余的空格，而varchar是不需要的。 char的存取数度还是要比varchar要快得多 因为其长度固定，方便程序的存储与查找；但是char也为此付出的是空间的代价，因为其长度固定，所以难免会有多余的空格占位符占据空间，可谓是以空间换取时间效率，而varchar是以空间效率为首位的。 存储内存 char的存储方式是，对英文字符（ASCII）占用1个字节，对一个汉字占用两个字节；而varchar的存储方式是，对每个英文字符占用2个字节，汉字也占用2个字节。 int类型 右侧的取值范围是在未加unsigned关键字的情况下，如果加了unsigned，则最大值翻倍，如tinyint unsigned的取值范围为(0~256)。 上图表格共有四列 字段类型, 占用字节数, 允许存储的最小值, 允许存储的最大值 拿int类型为例, 占用字节数为4byte, 字节(byte)并非是计算机存储的最小单位, 还有比字节(byte)更小的单位, 也就是位(bit),一个位就代表一个0或1; 8个位组成一个字节; 一般字节用大写B来表示byte, 位用小写b来表示bit. 计算机存储单位的换算: 1B=8b 1KB=1024B 1MB=1024KB 根据int类型允许存储的字节数是4个字节, 我们就能换算出int UNSIGNED(无符号)类型的能存储的最小值为0, 最大值为4294967295(即4B=32b, 最大值即为32个1组成); 修改表 - alter table 表名 add /drop column 列名（add 表名后可以跟属性） 插入数据 - insert into(可以不写) 表名 values(数据) 12345678insert into tb_student values(1001, &apos;菜菜&apos;, 1, &apos;四川遂宁&apos;, &apos;15282590984&apos;);insert into tb_student values(1002, &apos;冯宝宝&apos;, 0, &apos;四川达州&apos;, &apos;1528252122&apos;);insert into tb_student(stuname, stuid, tel) values(&apos;王也&apos;, 1005, &apos;153222331&apos;),(&apos;全性&apos;, 1006, &apos;123815101&apos;),(&apos;不要碧莲&apos;, 1007, &apos;123132133&apos;); 删除表 - delete/truncate from 表名 where 条件 如果没有条件会删除整个表的数据 123delete from tb_student where stuid=1006;delete from tb_student where stuid in (1005, 1007);delete from tb_student where addr is null; 删除地址为空的数据 truncate和 delete只删除数据不删除表的结构(定义) drop语句将删除表的结构被依赖的约束(constrain),触发器(trigger),索引(index); 依赖于该表的 存储过程/函数将保留,但是变为invalid状态. delete语句是DML,这个操作会放到rollback segment中,事务提交之后才生效;如果有相应的trigger, 执行的时候将被触发. truncate,drop是DDL 操作立即生效,原数据不放到rollback segment中,不能回滚. 操作不触发 trigger. delete语句不影响表所占用的extent, 高水线(high watermark)保持原位置不动 显然drop语句将表所占用的空间全部释放 速度,一般来说: drop&gt; truncate &gt; delete DROP用于删除表,数据库等. TRUNCATE和DELETE都是删除表数据. 但是TRUNCATE相当于初始化,比如如果有自增长ID,用TRUNCATE删除后,自增长Id会从1开始,（truncate会释放表所占的空间） 而delete则不会. 更新数据 - update 表名 set 列名=数据 12update tb_student set addr=&apos;四川绵阳&apos;,gender=2where addr is null; 查询数据 - select * from 表名 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657select stuname, gender from tb_student;-- 别名 将列名用别名代替select stuname as 姓名, gender as 性别 from tb_student;-- mysql独有的：如果为真返回男，为假返回女select stuname as 姓名, if(gender, &apos;男&apos;, &apos;女&apos;) as 性别 from tb_student;-- sql通用：如果为1返回男，为0返回女，为其他返回未知select stuname as 姓名,case gender when 1 then &apos;男&apos; when 0 then &apos;女&apos; else &apos;未知&apos; end as 性别 from tb_student;-- 对列做运算 ：将数据列整合到&apos;信息&apos;一列显示select concat(stuname, &apos;: &apos;, tel) as 信息 from tb_student;-- 筛选-- 查询学生的家庭住址(去重) distinctselect distinct addr from tb_student where addr is not null and addr&lt;&gt;&apos;&apos;;select stuid, stuname gender from tb_student where stuid&gt;1002;select stuid, stuname gender from tb_student where stuid between 1003 and 1007;-- &lt;&gt; 不等号select stuid, stuname gender from tb_student where stuid&lt;&gt;1002;select * from tb_student where stuid&gt;1002 or gender=1;-- 判断一个字段是否为null不能用=和&lt;&gt;select * from tb_student where stuid is not null;select * from tb_student where stuid in (1001, 1007);-- 模糊查询(char / varchar)-- %是一个通配符表示零个或任意多个字符select * from tb_student where stuname like &apos;冯%&apos;;select * from tb_student where addr like &apos;%川%&apos;;-- _也是一个通配符它表示一个字符select * from tb_student where stuname like &apos;冯_&apos;;select * from tb_student where stuname like &apos;冯__&apos;;-- length: 是计算字段的长度，一个汉字是算三个字符,一个数字或字母算一个字符select * from tb_student where length(stuname)&gt;6;-- 排序select * from tb_student order by stuiselect * from tb_student order by stuid desc; -- 降序select * from tb_student order by stuid asc; -- 默认升序select * from tb_student order by gender asc, stuid desc;-- 先筛选在排序select * from tb_student where gender=0 order by stuid desc;-- 限定 limit偏移多少行，offset跳过多少行select * from tb_student limit 5;select * from tb_student limit 4 offset 3; -- 从第4行开始显示4行数据select * from tb_student limit 3 offset 6; -- 从第7行开始显示3行数据-- 分页select * from tb_student limit 0,5; -- 参数一是跳过几行开始显示，参数二是筛选多少行select * from tb_student limit 5,5; -- 从第6行开始显示5行数据select * from tb_student limit 10,5; -- 从第11开始显示5行数据-- 筛选gender=0的数据并按照降序跳过0行偏移6行显示数据select * from tb_student where gender=0 order by stuid desc limit 6 offset 0;","tags":[{"name":"MYSQL","slug":"MYSQL","permalink":"https://caicaiget.github.io/tags/MYSQL/"}]},{"title":"约瑟夫环","date":"2018-10-13T05:57:05.000Z","path":"post/2018-10-13-约瑟夫环.html","text":"关于约瑟夫环有多个版本的题目 了解其中一种就可以类推了 幸运的基督徒 一共有30个人被困在一个小岛上，其中15个基督徒，15个普通人，岛上的食物不够30个人吃了，于是大家便决定杀死15个人，30个人围成一个圈，其中一个人从1报数，数到9的人便被杀死，又从1开始数，直到只剩下15个人。求基督徒的站位 这道题我们可以模拟一共有30个人，建一个列表，元素都是为true，杀死一个就赋值为false. 直接上代码吧 12345678910111213141516def main(): persons = [True] * 30 # 30个人 counter = 0 num, index = 0, 0 while counter &lt; 15: if persons[index]: # 如果是活人便报数 num += 1 if num == 9: persons[index] = False # 当报数到9了就赋值为false counter += 1 # counter + 1 代表死忙一个 num = 0 index += 1 index %= 30 # 循环到30 便从0开始 for person in persons: print(\"基\" if person else \"非\", end=\"\") print() 1基基基基非非非非非基基非基基基非基非非基基非非非基非非基基非 最后一个人 1、一群人围在一起坐成环状 2、从某个编号开始报数 3、数到某个数的时候，此人出列，下一个人重新报数 4、一直循环，直到所有人出列 ，约瑟夫环结束 1234567891011121314def func(count, k): l = list(range(1,count+1)) n=1 while len(l)&gt;1: # 如果剩余人数大于1继续循环 for i in l[:]: # 遍历剩下的人，遍历列表的切片，保证删除正确的元素 if n == k: l.remove(i) n=1 else: n += 1 print(l[0]) func(30, 9) # 30个人，9退出 利用数学公式 f[1] = 0； //当一个人的时候，出队人员编号为0 f[i] = (f[i-1] + m)%i //m表示每次数到该数的人出列，i表示当前序列的总人数 当i=n时用个循环就行了 而我们只需要得到第n次出列的结果即可，那么不需要另外声明数组保存数据，只需要直接一个for循环求得n阶约瑟夫环问题的结果即可 由于往往现实生活中编号是从n-1，那么我们把最后的结果加1即可。 123456def f(n, m): s = 0 for i in range(2, n+1): s = (s + m) % i print(s+1)f(11, 9)这个返回的是最后一个人的编号","tags":[{"name":"约瑟夫环","slug":"约瑟夫环","permalink":"https://caicaiget.github.io/tags/约瑟夫环/"}]},{"title":"动态规划算法","date":"2018-10-13T04:23:20.000Z","path":"post/2018-10-13-动态规划算法.html","text":"这里以斐波那契数列的递归算法为例 优化运行速度。 可以采用动态规划来求解的问题需要具有以下两个主要特征： 1）**重叠子问题（Overlapping Subproblems）：**有些子问题会被重复计算多次。 2）**最优子结构（Optimal Substructure）：**问题的最优解可以从某个子问题的最优解中获得。 斐波那契数列的递归 1234567891011# 这是循环的解法def fib2(num): a, b = 1, 1 for _ in range(num - 1): a, b = b, a + b return a# 递归def fib2(num): if num in (0, 1): return 1 return fib(num -1) + fib2(num - 2) 这个算法会导致运行时间成倍的增长。因为在计算时会有很多重复的运算 如： 123456789 fib(5) / \\ fib(4) fib(3) / \\ / \\ fib(3) fib(2) fib(2) fib(1) / \\ ¦ ¦ ¦fib(2) fib(1) 1 1 1 ¦ ¦ 1 1 对于重复的计算，我们声明一个字典来保存已经计算过的值，避免不必要的计算。 斐波那契数列递归的优化 12345678910111213141516171819# 方法1def fib(num, temp=&#123;&#125;): if num in (1, 2): return 1 try: return temp[num] except KeyError: temp[num] = fib(num - 1) + fib(num - 2) return temp[num] # 方法2def fastFib(n,memo): #memo是设置的一个字典 if not n in memo: #如果斐波那契数列的第n项数值不在字典里，那么用递归方式计算该值，并把该值放入字典中 memo[n]=fastFib(n-1,memo)+fastFib(n-2,memo) return memo[n] #如果斐波那契数列的第n项数值在字典里，那么直接返回字典里的该项数值def fib1(n): memo=&#123;0:0,1:1&#125; #初始化一个字典 return fastFib(n,memo) 运用了python的字典保存了递归中变量的值，在递归时如果值在字典中存在，就直接返回值，如在递归后面的调用中都是去字典中取值。","tags":[{"name":"动态规划算法","slug":"动态规划算法","permalink":"https://caicaiget.github.io/tags/动态规划算法/"}]},{"title":"汉诺塔问题","date":"2018-10-13T03:50:10.000Z","path":"post/2018-10-13-汉诺塔问题.html","text":"法国数学家爱德华·卢卡斯曾编写过一个印度的古老传说： 在世界中心贝拿勒斯（在印度北部）的圣庙里，一块黄铜板上插着三根宝石针。印度教的主神梵天在创造世界的时候，在其中一根针上从下到上地穿好了由大到小的64片金片，这就是所谓的汉诺塔。 法国数学家爱德华·卢卡斯曾编写过一个印度的古老传说： ​ 在世界中心贝拿勒斯（在印度北部）的圣庙里，一块黄铜板上插着三根宝石针。印度教的主神梵天在创造世界的时候，在其中一根针上从下到上地穿好了由大到小的64片金片，这就是所谓的汉诺塔。不论白天黑夜，总有一个僧侣在按照下面的法则移动这些金片：一次只移动一片，不管在哪根针上，小片必须在大片上面。僧侣们预言，当所有的金片都从梵天穿好的那根针上移到另外一根针上时，世界就将在一声霹雳中消灭，而梵塔、庙宇和众生也都将同归于尽。 1不管这个传说的可信度有多大，如果考虑一下把64片金片，由一根针上移到另一根针上，并且始终保持上小下大的顺序。这需要多少次移动呢?这里需要递归的方法。假设有n片，移动次数是f(n).显然f(1)=1,f(2)=3,f(3)=7，且f(k+1)=2*f(k)+1。此后不难证明f(n)=2^n-1。n=64时，假如每秒钟一次，共需多长时间呢？一个平年365天有31536000 秒，闰年366天有31622400秒，平均每年31556952秒，计算一下： $$ 2^64-1=18446744073709551615秒 $$ 这表明移完这些金片需要5845.54亿年以上，而地球存在至今不过45亿年，太阳系的预期寿命据说也就是数百亿年。真的过了5845.54亿年，不说太阳系和银河系，至少地球上的一切生命，连同梵塔、庙宇等，都早已经灰飞烟灭 题目 ​ 有三根相邻的柱子，标号为A,B,C，A柱子上从下到上按金字塔状叠放着n个不同大小的圆盘，要把所有盘子一个一个移动到柱子C上，并且每次移动同一根柱子上都不能出现大盘子在小盘子上方，请问至少需要多少次移动，设移动次数为H(n）。 ​ 首先我们肯定是把上面n-1个盘子移动到柱子B上，然后把最大的一块放在C上，最后把B上的所有盘子移动到C上，由此我们得出表达式： $$ H⑴ = 1 $$ $$ H(n) = 2*H(n-1）+1 (n&gt;1） $$ $$ 那么我们很快就能得到H(n）的一般式： $$ $$ H(n) = 2^n - 1 (n&gt;0) $$ 代码：用递归就可以很好的解决这个问题了 12345678910111213141516171819count = 0def move(num, a, b, c): if num &gt; 0: count += 1 # 把n-1个盘子从A搬到C move(num - 1, a, c, b) # 把最大的盘子从A搬到B print(f'&#123;a&#125; ----&gt; &#123;b&#125;') # 把n-1个盘子从C搬到B move(num - 1, c, b, a) def main(): num = int(input('盘子个数：')) move(num, 'A', 'B', 'C') print(f'需要&#123;count&#125;步')if __name__ == '__main__': main()","tags":[{"name":"汉诺塔问题","slug":"汉诺塔问题","permalink":"https://caicaiget.github.io/tags/汉诺塔问题/"}]},{"title":"python抽象类，接口，归一化","date":"2018-10-13T03:17:31.000Z","path":"post/2018-10-13-python抽象类，接口，归一化.html","text":"面向对象的程序设计分三步走： 定义类 数据抽象：找属性（名词） 行为抽象：找方法（动词） 创建对象 给对象发消息 接口 接口就是只定义了一些方法，而没有实现。【（这些方法被称为抽象方法），大家自行脑补，在一个方法中直接写了一个pass就是没有实现任何功能的方法，就叫做抽象方法】 为什么要有接口？ 接口提取了一群公共的函数，可以把接口当做一个函数的集合，让子类去实现接口中的函数 例如： 我们定义一个动物接口，接口里定义了有跑、吃、呼吸等接口函数，这样老鼠的类去实现了该接口，松鼠的类也去实现了该接口，由二者分别产生一只老鼠和一只松鼠送到你面前，即便是你分别不到底哪只是什么鼠你肯定知道他俩都会跑，都会吃，都能呼吸。 归一化 接口继承实质上是要求“做出一个良好的抽象，这个抽象规定了一个兼容接口，使得外部调用者无需关心具体细节，可一视同仁的处理实现了特定接口的所有对象”——这在程序设计上，叫做归一化 归一化使得高层的外部使用者可以不加区分的处理所有接口兼容的对象集合——就好象linux的泛文件概念一样，所有东西都可以当文件处理，不必关心它是内存、磁盘、网络还是屏幕（当然，对底层设计者，当然也可以区分出“字符设备”和“块设备”，然后做出针对性的设计：细致到什么程度，视需求而定）。 归一化，让使用者无需关心对象的类是什么，只需要的知道这些对象都具备某些功能就可以了，这极大地降低了使用者的使用难度。 抽象类 抽象类，就像是类和接口的混合体，具有接口的特性，在python中利用第三方abc模块，实现抽象类。 抽象类是一个特殊的类，它的特殊之处在于只能被继承，不能被实例化 为什么要有抽象类？ 如果说类是从一堆对象中抽取相同的内容而来的，那么抽象类就是从一堆类中抽取相同的内容而来的，内容包括数据属性和函数属性。 从实现角度来看，抽象类与普通类的不同之处在于：抽象类中只能有抽象方法（没有实现功能），该类不能被实例化，只能被继承，且子类必须实现抽象方法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768from abc import ABCMeta, abstractmethod# 声明这个类是一个抽象类，不能再创建这个类# 员工类class Employee(metaclass=ABCMeta): def __init__(self, name): self.name = name# 声明一个抽象的静态方法，子类必须继承或重写这个工资结算方法 @abstractmethod def salary(self): pass # 经理类class Manager(Employee): @property def salary(self): return 15000# 程序员class Programmer(Employee): def __init__(self, name): self.name = name self.working_hour = 0 # 将方法变为属性可以直接调用 @property def salary(self): return 200 * self.working_hour # 销售员class Saleman(Employee): def __init__(self, name): self.name = name self.sales = 0 @property def salary(self): return 1800 + self.sales * 0.05def main(): # 实例化多个对象存储到列表 emps = [ Manager('刘备'), Manager('曹操'), Programmer('诸葛亮'), Programmer('司马懿'), Saleman('貂蝉') ] # 将所有对象遍历出来 for emp in emps: # 针对不同的类的对象进行不同的处理 if isinstance(emp, Programmer): hour = int(input('请输入&#123;emp.name&#125;工作小时数：')) emp.working_hour = hour if isinstance(emp, Saleman): sales = int(input('请输入&#123;emp.name&#125;销售业绩：')) emp.sales = sales print(f'&#123;emp.name&#125;的月薪为&#123;emp.salary&#125;')if __name__ == '__main__': main()","tags":[{"name":"python抽象类","slug":"python抽象类","permalink":"https://caicaiget.github.io/tags/python抽象类/"}]},{"title":"python装饰器","date":"2018-10-13T01:40:36.000Z","path":"post/2018-10-13-python装饰器.html","text":"python的终极原则：高内聚，低耦合 在python中函数是一等公民 函数可以赋值给变量，可以作为函数达到参数和返回值 装饰器是一个很好的例子 python的参数 在讲装饰器之前先先说一下python的可变参数、关键字参数、命名关键字参数 可变参数和关键字参数 12def foo(*args, **kwargs): print(args, kwargs) *args： 在参数前面加一个*号，函数内部接收的是一个tuple，可变参数允许你传0个或者任意个参数，这些参数在函数调用时会自己组装成一个tuple *kwargs：参数前面添加两个*号，关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict 当然这些函数的参数名可以自己定义，只是一般用args,kwargs 命名关键字参数 对于定义了关键字参数的函数，函数的调用者可以传入任意不受限制的关键字参数，如果要限制关键字参数的名字，就可以用命名关键字参数，和关键字参数**kw不同，命名关键字参数需要一个特殊分隔符：*号，*号后面的参数被视为命名关键字参数，*后面的参数必须是关键字参数 12def person(name, age, *, city, job): print(name, age, city, job) 如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*号了： 与普通的位置参数不同，命名关键字参数*后面的参数必须传入参数名。如果没有传入参数名，调用将会报错 12def person(name, age, *args, city, job): print(name, age, args, city, job) 装饰器 装饰器函数： 用一个函数装饰另一个函数，给他增加额外的功能，装饰器的参数是被装饰的函数，返回的是附带装饰功能的函数，当调用被装饰的函数时，其实是执行了装饰器中返回的那个带装饰功能的函数。给函数加上装饰功能的好处是不需要写重复的代码 语法 在函数前面写上 @装饰器函数名 12345678910111213141516171819202122232425262728def record(fn): # 这里的fn就是被装饰的函数 def wrapper(*args, **kwargs): # 可以传入任意参数 start = time.time() ret_value = fn(*args, **kwargs) # 如果函数有返回值，这里获取返回值 end = time.time() print(f'&#123;end - start&#125;秒') return ret_value # 返回wrapper函数，实际上在调用被装饰函数时，返回这个函数，拥有被装饰函数的功能并且可以添加新功能 return wrapper# 调用装饰器@recorddef fac(num): result = 1 for n in range(1, num + 1): result *= n return result# 装饰器的本质是执行了下面的代码# foo1 = record(foo1)@recorddef foo1(a, b, c=20): return a + b + c 这个装饰器的功能是可以获取每个函数的执行时间。","tags":[{"name":"装饰器","slug":"装饰器","permalink":"https://caicaiget.github.io/tags/装饰器/"}]},{"title":"领扣刷题","date":"2018-10-12T01:13:50.000Z","path":"post/2018-10-12-纽扣算法题.html","text":"多做一些算法题加强自己逻辑能力 好记性不如写一篇文章。 利用自己的碎片时间可以复习 领扣题目","tags":[{"name":"算法","slug":"算法","permalink":"https://caicaiget.github.io/tags/算法/"}]},{"title":"多继承中的新式类和经典类","date":"2018-10-07T14:35:37.000Z","path":"post/2018-10-07-多继承中的新式类和经典类.html","text":"python中最难使用熟练莫过于类了。 总结一下关于python中类的多继承原理。 以及面试可能涵盖的知识点。 新式类和经典类的区别 Python 2.x中默认都是经典类，只有显式继承了object才是新式类 Python 3.x中默认都是新式类，不必显式的继承object 采用super()继承和不用super的区别 12345678910111213141516171819202122232425262728293031class Base: def __init__(self): print('Base show')class A1(Base): def __init__(self): super().__init__() print('A1 show')class A2(Base): def __init__(self): super().__init__() print('A2 show') def show(self): print('A2的show状态')class B(A1, A2): def __init__(self): super().__init__() print('B show') def __call__(self, num): print(num) def mydefault(self, *args): print('默认函数：'+ str(args)) def __getattr__(self, item): print('other fn:', item) return self.mydefault 当多继承采用super()时可以保证公共父类仅被执行一次，关于父类的索引顺序可以通过一个方法： ​ super(A2) --&gt; 表示查找时从mro列表中的哪一个类开始查找 123obj = B()print(obj.__class__)print(B.mro()) ​ mro:返回当前类的所有父类，以及父类的父类 执行的结果 123456Base showA2 showA1 showB show&lt;class '__main__.B'&gt;[&lt;class '__main__.B'&gt;, &lt;class '__main__.A1'&gt;, &lt;class '__main__.A2'&gt;, &lt;class '__main__.Base'&gt;, &lt;class 'object'&gt;] 如果想要下面的代码实现应该怎么写： 12obj_a1 = A1()obj_a1.show() 在类中，obj_a1.__class__代表当前类，使obj_a1.class = A2，就可以调用A2的方法 如何使一个对象能被直接调用 1234567# __call__方法可以使对象能被直接调用obj1 = B()print(obj1(2))# 使用__getattr__时使调用类中不存在的方法时会去调用自己写一个默认方法obj1.fn1(33)obj1.fn2('刘彦材')","tags":[{"name":"类","slug":"类","permalink":"https://caicaiget.github.io/tags/类/"}]},{"title":"linux常用操作命令","date":"2018-09-28T14:35:37.000Z","path":"post/2018-09-28-linux命令.html","text":"linux成长之路，共勉。 linux常用操作命令。 望多多交流。 python解释器 python有不同语言的的解释器 Python解释器的C实现 - CPython Python解释器的Java实现 - Jython Python解释器的C#实现 - IronPython Python解释器的Python实现 - PyPy linux基础知识 shell —-&gt; 人机对话的交互式环境 ~ —-&gt; 超级管理员的主目录root 在linux中文件名前面加点都是隐藏文件 shell会保存历史命令，可以点击上下箭头按键查看历史命令 制表键可以补全你输入的 命令、文件名… linux系统安装软件 —&gt; 使用包管理工具进行安装 yum（黄狗更新器修改版）/rpm（红帽子） 压缩文件： １、gz —gzip（压缩）/gunzip（解压） ２、xz —xz -z （压缩） / xz -d（解压） 所有命令接 –help 可以查看命令的参数 man 接命令 可以查看命令的详细作用和参数 info 接命令 一般用于程序员查看参数 归档和解归档： １、归档 —&gt;把多个文件合并成一个文件 ２、解归档 tar ----&gt;把一个文件拆成多个文件 ctl + c 终止进程/ ctrl + z 暂停进程并将进程置于后台 在执行文件时 文件+&amp; —&gt;（ ./fun.py &amp;） —&gt; 将进程置于后台运行 jobs 查看自己启动的后台进程(显示id) bg %id --&gt;让暂停的进程继续在后台运行 background fg %id --&gt; 让后台Inc拿到前台运行 foreground .bash_profile 中配置一些命令可以让你登录时就会执行这个命令这个是root下面的，想要所有用户都配置，可以在/etc/profile中配置 例如配置环境变量 PATH=$PATH:/usr/local/python37/bin，一登录账号就会配置好环境变量了 ps -ef | grep 名称 — 查看进程 netstat -nap | grep 名称 – 查看当服务的ip和端口 linux常用命令 exit/logout —&gt; 退出 write 用户名 —&gt; 给某个用户发消息 type 命令 —&gt; 查看命令信息 wall --&gt; 给所有用户发消息 mesg n/y —&gt; 不接受/接受消息 clear —&gt; 清除屏幕 who —&gt; 查看所有登录用户名 whoami —&gt; 查看自己登录用户名 ps （processes） —-&gt; 查看当前所有进程 top – &gt;查看所有进程 kill 进程id —&gt; 杀死进程（后接进程id） pkill -kill -t pts/0 --&gt; 注销其他用户 su —-&gt; 切换用户(后接用户名) adduser —&gt; 添加用户账号 passwd —&gt; 修改密码(接用户名，如果不接就是修改超级管理员的密码) whatis/man —-&gt; 查看当前命令介绍(后接命令) pwd —&gt; 查看当前根目录 cd(change directory) —&gt; 改变根目录 ls —&gt; 查看当前目录下的所有文件 -l —&gt; 长格式显示当前目录下的文件，包含详细信息 -R —&gt; 递归遍历出文件 -a —&gt; 查看所有文件（包含隐藏文件） -h —&gt;将文件大小以人类易读的方式显示(GB,KB) -d —&gt; 列出目录本身 wget(web get) —&gt; 去网上下载文件(后面接url地址) cat —&gt; 打开一个文件并查看文件内容(接文件名) history —&gt; 查看你所有历史命令 ! —&gt; 接history里历史命令的编号，可以执行编号对应的命令 history -c —&gt; 清除history的所有历史命令 mkdir —&gt; 创建一个空文件夹(目录) mkdir -p —&gt; 会自动创建父目录(如果父目录不存在) rmdir —&gt; 删除一个空文件夹(目录) touch —&gt; 新建一个空白文件 cp —&gt; 拷贝文件 rm —&gt; 删除文件（加上 -f 强制删除，不会询问你） rm -r —&gt; 递归 删除非空文件夹 mv —&gt; move - 剪切文件 shutdown / init 0 - 关机 reboot / init 6 - 重启 head / tai - 查看文件前面/后面部分(可以接行数) less / more - 分屏查看文件 echo - 回声，打印 echo 内容 &gt;文件名 —&gt; 将内容输入到文件中 date - 查看系统时间日期 cal - calendar - 查看日历 cal 2018 &gt; 文件名 —&gt;将日历输入到文件中 cal &gt;输出重定向 cal &gt;&gt; 追加输出重定向（将内容追加到文件末尾） cal 2&gt; 错误输出重定向 alias rmd=“rm -rf” —&gt; 别名rmd，给一些命令取一个别名 unalias rmd —&gt; 取消别名 | —&gt; 管道（进程间通信）- 把前一个进程的输出当成后一个进程的输入 grep 匹配的字符 —&gt;输出 匹配字符的结果 ls | grep centos —&gt; 查找含有centos的文件 wc （word count） —&gt; 统计行、单词、字节数量 ls | wc —&gt; 查看下面有多少个文件 uniq —&gt; 去重，只能去除相邻的重复元素 （不会影响原来的文件） sort —&gt; 排序 sort 文件名 | uniq | wc ----&gt; 排序并且去除重复元素并统计个数（不会影响原来的文件） yum / rpm install 文件名 —&gt; 安装软件 yum / rpm remove —&gt; 卸载软件 tar -x ----&gt; 解压（解归档） ln -s 带完整路径的文件名 连接文件名----&gt; 创建软链接，相当于快捷方式 ln —&gt; 创建硬链接 chmod —&gt; 改变文件权限–&gt;r:4&gt;w:2&gt;x:1 -rwxrwxrwx —&gt;111 111 111(二进制) —&gt; 777 u +/- (rwx) 拥有者 g +/- (rwx) 群组 o +/- (rwx) 其他人 a +/- (rwx) all代表（ugo） chgrp 群组 文件名 —&gt;改变文件所属群组 chown 账号名 文件名 ----&gt;改变文件的拥有者 chattr --&gt; 改变隐藏属性 (+ - =) —&gt; 增加，删除，设置隐藏属性 lsattr —&gt; 显示隐藏属性 linux使用包管理工具安装 --&gt; yum/rpm yuum search 文件名 ----&gt; -搜索按照包 yum -y install 文件名 … -----&gt; 安装软件(可以同时安装多个) yum -y remove 文件名… -----&gt; 卸载软件 yum info 文件名 ----&gt; 查看安装的软件的详细信息 yum update 软件名 —&gt; 更新(如果不跟文件名，就是更新全部软件) yum list installed ----&gt; 查看所有安装的软件 systemctl start 服务名 – &gt; 启动一个服务 umount/mount(挂载) —&gt;插入优盘时会在dev里面，需要挂载目录到mnt下 linux 源代码安装如下 python3.7的安装过程 CentOS安装Python3.7 1、下载源代码 1wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz 2、解压缩 1gunzip Python-3.7.0.taz 3、解归档 在加个-v查看安装过程 1tar -xf Python-3.7.0.tar 4、安装底层依赖库 1yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel 5、安装前的配置 12cd Python-3.7.0./configure --prefix=/usr/local/pyhton37 --enable-optimizations 6、构建安装 1make &amp;&amp; make install 7、配置PATH环境变量 仅仅是临时建立环境变量 1export PATH = $PATH:/usr/local/python37/bin 8、注册软连接（符号链接） 硬链接 - 文件的引用 只要引用数不为0 文件就会一直存在（建一个硬链接，引用就会加一，相当于建立了一个副本在这个硬链接处） ln 带完整路径的文件名 链接文件名 软连接 - 相当于文件的快捷方式，如果文件被删除软链接失效 1ln -s /usr/local/python37/bin/python3 /usr/bin/python3 In -s 带完整路径的文件名 链接文件名 vim - 文本编辑神奇 命令模式 i/a—&gt;编辑模式 编辑模式 esc—&gt;命令模式 命令模式 shift+:或/—&gt;末行模式 命令模式 hjkl/HML/0$/w/gg/G —&gt; 移动光标 ctrl+e / crtl+y / crtl+f / crtl+b —&gt;翻页 yy --复制 p --&gt;粘贴 dd --&gt;删除 u --&gt; 撤销 crtl+r–&gt;恢复 ctrl+x ctrl+o --&gt;代码提示 /正则表达式 --匹配搜索特定字符 搜索出来后 --&gt; n 向下搜 / N 向上搜 末行模式 :w – 保存 :map 快捷键 功能命令 —在命令模式映射一个快捷键 :inoremap _main if name == “main”: 在输入模式映射一个快捷键_main 并且不递归映射(nore) :q – 退出 :set nu 开启行号 :set ts = 4 tab缩进为5 :1,$s/正则匹配被替换的内容1/替换的字符2/gice —&gt;替换，将正则匹配的字符替换为字符2，$代表文件末尾，也可以写行号 g:全局模式 i:忽略大小写 c:确认模式 e:忽略错误 vim -d 文件1 文件2 对两个文件进行版本比较 vim 文件1 文件2… 在末行模式 :ls 查看打开的文件以及对应的标号 :b 文件编号 —&gt;切换到编号对应的文件 :vs 垂直拆分两个窗口 :sp 水平拆分两个窗口 命令模式 ：crtl+w 两次就可以在两个窗口切换光标 :wqa 全部保存退出 linux 启动服务 ：nginx systemctl 命令 +服务 ip地址可以确定网络上的一台主机，端口号可以用来区分主机上的不同的服务 systemctl start nginx systemctl stop nginx systemctl restart nginx systemctl status nginx 查看服务状态 systemctl enable 开机自启 systemctl disable 关闭开机自启 journalctl -xe 查看保存日志 远程登录与文件传输 ifconfig --&gt; linux查看自己的网络地址ip ping www.baidu.com 查看自己的延迟 ssh root(用户名)@对方的公网ip --&gt;远程连接别人的服务器，输入密码 scp 文件名(也可以是别服务器的文件) root(账户名)@101.231.23.21(ip地址):绝对路径 —&gt; 传输文件 例如 scp root@101.200.57.142:/root/hello root@119.23.202.138:/root/hellowuliang sftp root(用户名)@对方的公网ip —&gt;当你连接好时时,会出现 sftp&gt;， get/put 文件名 —&gt;下载/上传文件 lls —&gt;查看本地目录下所有文件 ls —&gt; 查对方账号目录下所有 netstat -nap | grep 80 —&gt; 查看所有开启的端口 配置防火墙 systemctl start firewalld 启动防火墙 firewall-cmd --permanent --add-port=80/tcp 开启80加端口 system restart firewalld 重启防火墙，设置才生效 firewall-cmd --query-port=80/tcp 查询80端口是否开启 firewall-cmd --remove-port=80/tcp 移除端口 firewall-cmd --list-port 显示当前开启的端口 firewall-cmd --query-service=ssh 查询ssh服务是否开启 system enable firewalld 设置开机自启动防火墙","tags":[{"name":"linux命令","slug":"linux命令","permalink":"https://caicaiget.github.io/tags/linux命令/"}]},{"title":"markdown语法","date":"2018-09-12T11:33:36.000Z","path":"post/2018-09-12-markdown语法.html","text":"先熟悉下markdown语法。 这是写好一篇博客的基本要求 加油！ MarkDown学习 1. 生成目录 输入[toc]，然后回车，就可以生成，目录列表 2. 列表 列表分为有序列表和无序列表 12345- 梨子+ 苹果* 桃子1. 鸭蛋2. 鹅蛋 效果: 梨子 苹果 桃子 鸭蛋 鹅蛋 3. 表格 可以使用Ctrl+T快捷键来插入表格，按下快捷键之后就会出现一个表格设置，预先设定行数和列数，然后就出现表格了 1 2 3 4 5 6 7 8 4. 超链接 语法1（行内式链接） 1[百度][https://baidu.com] 效果1 [百度][https://baidu.com] 语法2 1&lt;https://github.com/&gt; 效果2 https://github.com/ 5. 下划线 语法 1&lt;u&gt;下划线&lt;/u&gt; 效果 下划线 6. 删除线 语法 1~~删除线~~ 效果 删除线 7. 分割线与加粗 语法 1234__加粗1__*****加粗2**--- 效果 加粗1 加粗2 8. 符号的输入 语法 123456789101112\\\\ 反斜线\\` 反引号\\* 星号\\_ 底线\\&#123; \\&#125; 花括号\\[ \\] 方括号\\( \\) 括弧\\# 井字号\\+ 加号\\- 减号\\. 英文句点\\! 惊叹号 9. 特殊字符 语法 1234567891011121314151617181920&amp;copy; 版权 &amp;reg; 注册商标&amp;trade; 商标&amp;nbsp; 空格&amp;amp; 和号&amp;quot; 引号&amp;apos; 撇号&amp;lt; 小于号&amp;gt; 大于号&amp;ne; 不等号&amp;le; 小于等于&amp;ge; 大于等于&amp;cent; 分&amp;pound; 磅&amp;euro; 欧元&amp;yen; 元&amp;sect; 节&amp;times; 乘号&amp;divide; 除号&amp;plusmn; 正负号 效果 © 版权 ® 注册商标 ™ 商标 空格 &amp; 和号 &quot; 引号 ' 撇号 &lt; 小于号 &gt; 大于号 ≠ 不等号 ≤ 小于等于 ≥ 大于等于 ¢ 分 £ 磅 € 欧元 ¥ 元 § 节 × 乘号 ÷ 除号 ± 正负号 10. 数学表达式 行内公式可以用$x=5$来插入数学公式。（需要在File-&gt;Preferences中勾选“Inline math”） $x=5$ 行间公式$$后输入回车来插入数学公式。 $$ x=5 $$ 11. 图表 12345graph LRA[Hard edge] --&gt;B(Round edge)B --&gt; C&#123;Decision&#125;C --&gt;|One| D[Result one]C --&gt;|Two| E[Result two] 12345graph LRA[Hard edge] --&gt;B(Round edge)B --&gt; C&#123;Decision&#125;C --&gt;|One| D[Result one]C --&gt;|Two| E[Result two]","tags":[{"name":"markdown语法","slug":"markdown语法","permalink":"https://caicaiget.github.io/tags/markdown语法/"}]},{"title":"python推荐书籍","date":"2018-08-30T14:35:37.000Z","path":"post/2018-08-30-Python阅读.html","text":"python推荐书籍: python成长之路的一些书籍，从易到难。 &lt;The rest of contents | 余下全文&gt; Python参考书籍 入门读物 《Python基础教程》（Beginning Python From Novice to Professional） 《Python学习手册》（Learning Python） 《Python编程》（Programming Python） 《Python Cookbook》 《Python程序设计》（Python Programming: An Introduction to Computer Science） 《Modern Python Cookbook》 进阶读物 《Python核心编程》（Core Python Applications Programming） 《流畅的Python》（Fluent Python） 《Effective Python：编写高质量Python代码的59个有效方法》（Effective Python 59 Specific Ways to Write Better Python） 《Python设计模式》（Learning Python Design Patterns） 《Python高级编程》（Expert Python Programming） 《Python性能分析与优化》（Mastering Python High Performance） Web框架 《Django基础教程》（Tango with Django） 《轻量级Django》（Lightweight Django） 《Python Web开发：测试驱动方法》（Test-Driven Development with Python） 《Web Development with Django Cookbook》 《Test-Driven Development with Django》 《Django Project Blueprints 》 《Flask Web开发：基于Python的Web应用开发实战》（Flask Web Development: Developing Web Applications with Python） 《深入理解Flask》（Mastering Flask） 爬虫开发 《用Python写网络爬虫》（Web Scraping with Python） 《精通Python爬虫框架Scrapy》（Learning Scrapy） 《Python网络数据采集》（Web Scraping with Python） 《Python爬虫开发与项目实战》 《Python 3网络爬虫开发实战》 数据分析 《利用Python进行数据分析》（Python for Data Analysis） 《Python数据科学手册》（Python Data Science Handbook） 《Python金融大数据分析》（Python for Finance） 《Python数据可视化编程实战》（Python Data Visualization Cookbook） 《Python数据处理》（Data Wrangling with Python） 机器学习 《Python机器学习基础教程》（Introduction to Machine Learning with Python） 《Python机器学习实践指南》（Python Machine Learning Blueprints） 《Python Machine Learning Case Studies》 《Python机器学习实践：测试驱动的开发方法》（Thoughtful Machine Learning with Python A Test Driven Approach） 《Python机器学习经典实例》（Python Machine Learning Cookbook） 《TensorFlow：实战Google深度学习框架》","tags":[{"name":"阅读","slug":"阅读","permalink":"https://caicaiget.github.io/tags/阅读/"}]}]