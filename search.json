[{"title":"多继承中的新式类和经典类","url":"/2018/10/07/python类/","content":"** {{ title }}：** \n红黑树\n<!-- more -->\n1. #### 新式类和经典类的区别\n  Python 2.x中默认都是经典类，只有显式继承了object才是新式类\n  Python 3.x中默认都是新式类，不必显式的继承object\n2. #### 采用super()继承和不用super的区别\n```\nclass Base:\n    def __init__(self):\n        print('Base show')\n\nclass A1(Base):\n    def __init__(self):\n        super().__init__()\n        print('A1 show')\n\nclass A2(Base):\n    def __init__(self):\n        super().__init__()\n        print('A2 show')\n\n    def show(self):\n        print('A2的show状态')\n\nclass B(A1, A2):\n    def __init__(self):\n        super().__init__()\n        print('B show')\n\n    def __call__(self, num):\n        print(num)\n\n    def mydefault(self, *args):\n        print('默认函数：'+ str(args))\n\n    def __getattr__(self, item):\n        print('other fn:', item)\n        return self.mydefault\n\n```\n3. #### 当多继承采用super()时可以保证公共父类仅被执行一次，关于父类的索引顺序可以通过一个方法：\n\t​\tsuper(A2) --> 表示查找时从mro列表中的哪一个类开始查找\n```python\nobj = B()\nprint(obj.__class__)\nprint(B.mro())\n```\n​\tmro:返回当前类的所有父类，以及父类的父类\n执行的结果\n```python\nBase show\nA2 show\nA1 show\nB show\n<class '__main__.B'>\n[<class '__main__.B'>, <class '__main__.A1'>, <class '__main__.A2'>, <class '__main__.Base'>, <class 'object'>]\n```\n4. #### 如果想要下面的代码实现应该怎么写：\n```python\nobj_a1 = A1()\nobj_a1.show()\n```\n在类中，obj_a1.__class__代表当前类，使obj_a1.__class__ = A2，就可以调用A2的方法\n\n5. #### 如何使一个对象能被直接调用\n ```python\n# __call__方法可以使对象能被直接调用\nobj1 = B()\nprint(obj1(2))\n\n# 使用__getattr__时使调用类中不存在的方法时会去调用自己写一个默认方法\nobj1.fn1(33)\nobj1.fn2('刘彦材')\n\n ```\n\n","tags":["类"]},{"title":"python推荐书籍","url":"/2017/10/30/Python阅读/","content":"** {{ title }}：** <Excerpt in index | 首页摘要>\npython成长之路的一些书籍，从易到难。\n<!-- more -->\n<The rest of contents | 余下全文>\n## Python参考书籍\n\n### 入门读物\n\n1. 《Python基础教程》（*Beginning Python From Novice to Professional*）\n2. 《Python学习手册》（*Learning Python*）\n3. 《Python编程》（*Programming Python*）\n4. 《Python Cookbook》\n5. 《Python程序设计》（*Python Programming: An Introduction to Computer Science*）\n6. 《Modern Python Cookbook》\n\n### 进阶读物\n\n1. 《Python核心编程》（*Core Python Applications Programming*）\n2. 《流畅的Python》（*Fluent Python*）\n3. 《Effective Python：编写高质量Python代码的59个有效方法》（*Effective Python 59 Specific Ways to Write Better Python*）\n4. 《Python设计模式》（*Learning Python Design Patterns*）\n5. 《Python高级编程》（*Expert Python Programming*）\n6. 《Python性能分析与优化》（*Mastering Python High Performance*）\n\n### Web框架\n\n1. 《Django基础教程》（*Tango with Django*）\n2. 《轻量级Django》（*Lightweight Django*）\n3. 《Python Web开发：测试驱动方法》（*Test-Driven Development with Python*）\n4. 《Web Development with Django Cookbook》\n5. 《Test-Driven Development with Django》\n6. 《Django Project Blueprints 》\n7. 《Flask Web开发：基于Python的Web应用开发实战》（*Flask Web Development: Developing Web Applications with Python*）\n8. 《深入理解Flask》（*Mastering Flask*）\n\n### 爬虫开发\n\n1. 《用Python写网络爬虫》（*Web Scraping with Python*）\n2. 《精通Python爬虫框架Scrapy》（*Learning Scrapy*）\n3. 《Python网络数据采集》（*Web Scraping with Python*）\n4. 《Python爬虫开发与项目实战》\n5. 《Python 3网络爬虫开发实战》\n\n### 数据分析\n\n1. 《利用Python进行数据分析》（*Python for Data Analysis*）\n2. 《Python数据科学手册》（*Python Data Science Handbook*）\n3. 《Python金融大数据分析》（*Python for Finance*）\n4. 《Python数据可视化编程实战》（*Python Data Visualization Cookbook*）\n5. 《Python数据处理》（*Data Wrangling with Python*）\n\n### 机器学习\n\n1. 《Python机器学习基础教程》（*Introduction to Machine Learning with Python*）\n2. 《Python机器学习实践指南》（*Python Machine Learning Blueprints*）\n3. 《Python Machine Learning Case Studies》\n4. 《Python机器学习实践：测试驱动的开发方法》（*Thoughtful Machine Learning with Python A Test Driven Approach*）\n5. 《Python机器学习经典实例》（*Python Machine Learning Cookbook*）\n6. 《TensorFlow：实战Google深度学习框架》","tags":["算法"],"categories":["algorithm"]}]