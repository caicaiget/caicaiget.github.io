<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>caicai</title>
  
  <subtitle>长路漫漫，唯py作伴。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://caicaiget.github.io/"/>
  <updated>2018-10-07T12:53:08.799Z</updated>
  <id>https://caicaiget.github.io/</id>
  
  <author>
    <name>菜菜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多继承中的新式类和经典类</title>
    <link href="https://caicaiget.github.io/2018/10/07/python%E7%B1%BB/"/>
    <id>https://caicaiget.github.io/2018/10/07/python类/</id>
    <published>2018-10-07T14:35:37.000Z</published>
    <updated>2018-10-07T12:53:08.799Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 多继承中的新式类和经典类：</strong><br>红黑树<br><a id="more"></a></p><ol><li><h4 id="新式类和经典类的区别"><a href="#新式类和经典类的区别" class="headerlink" title="新式类和经典类的区别"></a>新式类和经典类的区别</h4>Python 2.x中默认都是经典类，只有显式继承了object才是新式类<br>Python 3.x中默认都是新式类，不必显式的继承object</li><li><h4 id="采用super-继承和不用super的区别"><a href="#采用super-继承和不用super的区别" class="headerlink" title="采用super()继承和不用super的区别"></a>采用super()继承和不用super的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Base:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&apos;Base show&apos;)</span><br><span class="line"></span><br><span class="line">class A1(Base):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line">        print(&apos;A1 show&apos;)</span><br><span class="line"></span><br><span class="line">class A2(Base):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line">        print(&apos;A2 show&apos;)</span><br><span class="line"></span><br><span class="line">    def show(self):</span><br><span class="line">        print(&apos;A2的show状态&apos;)</span><br><span class="line"></span><br><span class="line">class B(A1, A2):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line">        print(&apos;B show&apos;)</span><br><span class="line"></span><br><span class="line">    def __call__(self, num):</span><br><span class="line">        print(num)</span><br><span class="line"></span><br><span class="line">    def mydefault(self, *args):</span><br><span class="line">        print(&apos;默认函数：&apos;+ str(args))</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, item):</span><br><span class="line">        print(&apos;other fn:&apos;, item)</span><br><span class="line">        return self.mydefault</span><br></pre></td></tr></table></figure></li><li><h4 id="当多继承采用super-时可以保证公共父类仅被执行一次，关于父类的索引顺序可以通过一个方法："><a href="#当多继承采用super-时可以保证公共父类仅被执行一次，关于父类的索引顺序可以通过一个方法：" class="headerlink" title="当多继承采用super()时可以保证公共父类仅被执行一次，关于父类的索引顺序可以通过一个方法："></a>当多继承采用super()时可以保证公共父类仅被执行一次，关于父类的索引顺序可以通过一个方法：</h4><p> ​    super(A2) –&gt; 表示查找时从mro列表中的哪一个类开始查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj = B()</span><br><span class="line">print(obj.__class__)</span><br><span class="line">print(B.mro())</span><br></pre></td></tr></table></figure></li></ol><p>​    mro:返回当前类的所有父类，以及父类的父类<br>执行的结果<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Base show</span><br><span class="line">A2 show</span><br><span class="line">A1 show</span><br><span class="line">B show</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">B</span>'&gt;</span></span><br><span class="line">[&lt;class '__main__.B'&gt;, &lt;class '__main__.A1'&gt;, &lt;class '__main__.A2'&gt;, &lt;class '__main__.Base'&gt;, &lt;class 'object'&gt;]</span><br></pre></td></tr></table></figure></p><ol start="4"><li><h4 id="如果想要下面的代码实现应该怎么写："><a href="#如果想要下面的代码实现应该怎么写：" class="headerlink" title="如果想要下面的代码实现应该怎么写："></a>如果想要下面的代码实现应该怎么写：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj_a1 = A1()</span><br><span class="line">obj_a1.show()</span><br></pre></td></tr></table></figure></li></ol><p>在类中，obj_a1.<strong>class</strong>代表当前类，使obj_a1.<strong>class</strong> = A2，就可以调用A2的方法</p><ol start="5"><li><h4 id="如何使一个对象能被直接调用"><a href="#如何使一个对象能被直接调用" class="headerlink" title="如何使一个对象能被直接调用"></a>如何使一个对象能被直接调用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __call__方法可以使对象能被直接调用</span></span><br><span class="line">obj1 = B()</span><br><span class="line">print(obj1(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用__getattr__时使调用类中不存在的方法时会去调用自己写一个默认方法</span></span><br><span class="line">obj1.fn1(<span class="number">33</span>)</span><br><span class="line">obj1.fn2(<span class="string">'刘彦材'</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 多继承中的新式类和经典类：&lt;/strong&gt;&lt;br&gt;红黑树&lt;br&gt;
    
    </summary>
    
    
      <category term="类" scheme="https://caicaiget.github.io/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>python推荐书籍</title>
    <link href="https://caicaiget.github.io/2017/10/30/Python%E9%98%85%E8%AF%BB/"/>
    <id>https://caicaiget.github.io/2017/10/30/Python阅读/</id>
    <published>2017-10-30T14:35:37.000Z</published>
    <updated>2018-10-07T07:56:18.306Z</updated>
    
    <content type="html"><![CDATA[<p><strong> python推荐书籍：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>python成长之路的一些书籍，从易到难。<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h2 id="Python参考书籍"><a href="#Python参考书籍" class="headerlink" title="Python参考书籍"></a>Python参考书籍</h2><h3 id="入门读物"><a href="#入门读物" class="headerlink" title="入门读物"></a>入门读物</h3><ol><li>《Python基础教程》（<em>Beginning Python From Novice to Professional</em>）</li><li>《Python学习手册》（<em>Learning Python</em>）</li><li>《Python编程》（<em>Programming Python</em>）</li><li>《Python Cookbook》</li><li>《Python程序设计》（<em>Python Programming: An Introduction to Computer Science</em>）</li><li>《Modern Python Cookbook》</li></ol><h3 id="进阶读物"><a href="#进阶读物" class="headerlink" title="进阶读物"></a>进阶读物</h3><ol><li>《Python核心编程》（<em>Core Python Applications Programming</em>）</li><li>《流畅的Python》（<em>Fluent Python</em>）</li><li>《Effective Python：编写高质量Python代码的59个有效方法》（<em>Effective Python 59 Specific Ways to Write Better Python</em>）</li><li>《Python设计模式》（<em>Learning Python Design Patterns</em>）</li><li>《Python高级编程》（<em>Expert Python Programming</em>）</li><li>《Python性能分析与优化》（<em>Mastering Python High Performance</em>）</li></ol><h3 id="Web框架"><a href="#Web框架" class="headerlink" title="Web框架"></a>Web框架</h3><ol><li>《Django基础教程》（<em>Tango with Django</em>）</li><li>《轻量级Django》（<em>Lightweight Django</em>）</li><li>《Python Web开发：测试驱动方法》（<em>Test-Driven Development with Python</em>）</li><li>《Web Development with Django Cookbook》</li><li>《Test-Driven Development with Django》</li><li>《Django Project Blueprints 》</li><li>《Flask Web开发：基于Python的Web应用开发实战》（<em>Flask Web Development: Developing Web Applications with Python</em>）</li><li>《深入理解Flask》（<em>Mastering Flask</em>）</li></ol><h3 id="爬虫开发"><a href="#爬虫开发" class="headerlink" title="爬虫开发"></a>爬虫开发</h3><ol><li>《用Python写网络爬虫》（<em>Web Scraping with Python</em>）</li><li>《精通Python爬虫框架Scrapy》（<em>Learning Scrapy</em>）</li><li>《Python网络数据采集》（<em>Web Scraping with Python</em>）</li><li>《Python爬虫开发与项目实战》</li><li>《Python 3网络爬虫开发实战》</li></ol><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><ol><li>《利用Python进行数据分析》（<em>Python for Data Analysis</em>）</li><li>《Python数据科学手册》（<em>Python Data Science Handbook</em>）</li><li>《Python金融大数据分析》（<em>Python for Finance</em>）</li><li>《Python数据可视化编程实战》（<em>Python Data Visualization Cookbook</em>）</li><li>《Python数据处理》（<em>Data Wrangling with Python</em>）</li></ol><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><ol><li>《Python机器学习基础教程》（<em>Introduction to Machine Learning with Python</em>）</li><li>《Python机器学习实践指南》（<em>Python Machine Learning Blueprints</em>）</li><li>《Python Machine Learning Case Studies》</li><li>《Python机器学习实践：测试驱动的开发方法》（<em>Thoughtful Machine Learning with Python A Test Driven Approach</em>）</li><li>《Python机器学习经典实例》（<em>Python Machine Learning Cookbook</em>）</li><li>《TensorFlow：实战Google深度学习框架》</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; python推荐书籍：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;python成长之路的一些书籍，从易到难。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="https://caicaiget.github.io/categories/algorithm/"/>
    
    
      <category term="算法" scheme="https://caicaiget.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
